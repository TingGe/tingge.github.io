/*
* TuSimple_JS_Tracker - v1.2.8 - 2015-11-27
* Copyright (c) 2015 TuSimple.inc; Licensed
*/


(function() {
  var TS_VERSION, tracker;

  TS_VERSION = '1.2.8';

  /**
  # 监测新浪魔图曝光统计（对应新浪魔图 window.sinaadsMagicMapViewTAG）和点击统计（对应新浪魔图 window.sinaadsMagicMapClickTAG）
  */


  tracker = {};

  setTimeout(function() {
    var clicktag, decode, doc, loc, sendClk, sendImp, sendSinaMagic, viewtag, win, _,
      _this = this;
    _ = tracker.toolInit({});
    win = window;
    doc = document;
    loc = doc.location;
    decode = decodeURIComponent;
    viewtag = _.findUrl(loc.href, "viewtag");
    clicktag = _.findUrl(loc.href, "clicktag");
    sendSinaMagic = function(str, flag) {
      var arr, countUrl, i, _results;
      if (_.isString(str) && str.length > 0) {
        arr = decode(str).split("|");
        _results = [];
        for (i in arr) {
          countUrl = decodeURIComponent(arr[i]);
          if (_.isUrl(countUrl)) {
            _results.push(_.send(countUrl, new Image(0, 0)));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
    sendClk = function(evt) {
      var elem, ex, l;
      try {
        elem = _.event.target(_.event.event(evt));
        if (_.isDom(elem) && elem.tagName.toLowerCase() !== 'a') {
          l = 5;
          while (l > 0) {
            elem = elem.parentNode;
            if (elem.tagName.toLowerCase() === 'a') {
              break;
            }
            l--;
          }
          if (elem.tagName.toLowerCase() !== 'a') {
            return;
          }
        }
        if (_.isUndefined(elem.href)) {
          return;
        }
        if (elem.tagName.toLowerCase() === 'a' && !(_.isUrl(elem.getAttribute('href')))) {
          return;
        }
        return sendSinaMagic(clicktag, "clk");
      } catch (_error) {
        ex = _error;
      }
    };
    sendImp = function() {
      var ex, i, imgs, impUrl, item, _results;
      try {
        imgs = doc.getElementsByTagName("img");
        _results = [];
        for (i in imgs) {
          item = imgs[i];
          impUrl = item.getAttribute('imp');
          if (_.isUrl(impUrl)) {
            _.send(impUrl, new Image(0, 0));
          }
          _results.push(sendSinaMagic(viewtag, "imp"));
        }
        return _results;
      } catch (_error) {
        ex = _error;
      }
    };
    _.event.add(win, "click", function(event) {
      return sendClk(event);
    });
    _.event.add(win, "load", sendImp());
    return _;
  }, 0);

  tracker.toolInit = function(_, undef) {
    var isType, nativeIsArray;
    nativeIsArray = Array.isArray;
    isType = function(type) {
      return function(obj) {
        return Object.prototype.toString.call(obj) === "[object " + type + "]";
      };
    };
    _.isString = isType("String");
    _.isFunction = isType("Function");
    _.isArray = nativeIsArray || isType("Array");
    _.isObject = isType("Object");
    _.isUndefined = function(obj) {
      return typeof obj === "undefined";
    };
    _.isUrl = function(str) {
      return /^http/.test(str);
    };
    _.map = function(obj, iterator, context) {
      var index, results, value, _i, _len;
      results = [];
      if (!obj) {
        return results;
      }
      for (index = _i = 0, _len = obj.length; _i < _len; index = ++_i) {
        value = obj[index];
        results[results.length] = iterator.call(context, value, index, obj);
      }
      return results;
    };
    _.isDom = function(obj) {
      if (obj && obj.nodeType && obj.nodeType === 1) {
        return true;
      }
      return false;
    };
    _.send = function(url, mediator) {
      return mediator.src = url;
    };
    _.parseUrl = function(url) {
      var expRet, hash, params, q, uri, urlArr;
      if (!url) {
        return {};
      }
      expRet = (new RegExp('#.*$')).exec(url);
      hash = _.isArray(expRet) ? expRet[0] : '';
      urlArr = url.replace(hash, '').split('?');
      uri = urlArr.shift();
      q = urlArr.join('?') || "";
      params = q.length > 0 ? _.map(q.split('&'), function(x) {
        return x.split('=');
      }) : [];
      return {
        uri: uri,
        params: params,
        hash: hash,
        qs: q
      };
    };
    _.findUrl = function(url, key) {
      var params, value;
      params = (_.parseUrl(url)).params;
      value = '';
      _.map(params, function(x) {
        if (x[0] === key) {
          return value = x[1];
        }
      });
      return value;
    };
    _.event = {
      add: function(elem, type, handler) {
        var _add, _attach, _on;
        _add = "addEventListener";
        _attach = "attachEvent";
        _on = "on" + type;
        if (elem[_add]) {
          return elem[_add](type, handler, false);
        } else if (elem[_attach]) {
          return elem[_attach](_on, handler);
        } else {
          return elem[_on] = handler;
        }
      },
      remove: function(elem, type, handler) {
        var _detach, _on, _rm;
        _rm = "removeEventListener";
        _detach = "detachEvent";
        _on = "on" + type;
        if (elem[_rm]) {
          return elem[_rm](type, handler, false);
        } else if (elem[_detach]) {
          return elem[_detach](_on, handler);
        } else {
          return elem[_on] = null;
        }
      },
      event: function(e) {
        return e || window.event;
      },
      target: function(e) {
        return e && (e.target || e.srcElement || null);
      }
    };
    return _;
  };

}).call(this);
