/*
* TuSimple_ads_JS_SDK - v1.2.6 - 2015-11-24
* Copyright (c) 2015 Tusimple.inc; Licensed
*/


(function() {
  var CT_VERSION, ct, win,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CT_VERSION = '1.2.6';

  ct = {};

  win = window;

  if (win.noautoad) {
    return false;
  }

  if (top.location !== self.location) {
    return false;
  }

  setTimeout(function() {
    var ct_namespace, isReady, packer, queue, send, _;
    _ = ct.cookieInit({});
    _ = ct.deviceInit(_);
    _ = ct.toolInit(_);
    _ = ct.adInit(_);
    packer = ct.packerInit(_);
    isReady = false;
    send = function(item) {
      var fn, fnName, pac;
      fnName = item.shift();
      if (_.isFunction(fnName)) {
        return fnName.apply(null, item.slice(1));
      }
      if (fnName === '_create') {
        isReady = true;
      }
      if (!isReady) {
        return;
      }
      if (!(fn = packer[fnName])) {
        return;
      }
      pac = fn.apply(null, item);
      if (_.isObject(pac) && pac.send === true) {
        return _.request(pac);
      }
      return pac;
    };
    ct_namespace = _.isString(win.CogtuObject) && _.trim(win.CogtuObject) || "cogtu";
    queue = win[ct_namespace].q;
    setInterval(function() {
      var _results;
      _results = [];
      while (queue && queue.length > 0) {
        _results.push(send(Array.prototype.slice.call(queue.shift(), 0)));
      }
      return _results;
    }, 1);
    return win[ct_namespace].push = send;
  }, 0);

  ct.cookieInit = function(_) {
    var config, dc, decode, doc, ec, encode, extend, parseCookieValue, pluses, read, stringifyCookieValue;
    if (_ == null) {
      _ = {};
    }
    doc = document;
    ec = encodeURIComponent;
    dc = decodeURIComponent;
    pluses = /\+/g;
    encode = function(s) {
      if (config.raw) {
        return s;
      } else {
        return ec(s);
      }
    };
    decode = function(s) {
      if (config.raw) {
        return s;
      } else {
        try {
          return dc(s);
        } catch (_error) {}
      }
    };
    stringifyCookieValue = function(value) {
      return encode(String(value));
    };
    parseCookieValue = function(s) {
      if (s.indexOf('"') === 0) {
        s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
      }
      try {
        s = dc(s.replace(pluses, ' '));
      } catch (_error) {}
      return s;
    };
    read = function(s, converter) {
      var value;
      value = config.raw ? s : parseCookieValue(s);
      return (typeof converter === "function" ? converter(value) : void 0) || value;
    };
    extend = function() {
      var k, obj, objs, ret, v, _i, _len;
      objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ret = objs.shift();
      for (_i = 0, _len = objs.length; _i < _len; _i++) {
        obj = objs[_i];
        for (k in obj) {
          v = obj[k];
          ret[k] = v;
        }
      }
      return ret;
    };
    config = _.cookie = function(key, value, options) {
      var cookie, cookies, days, item, name, parts, result, t, _i, _len;
      if (value !== void 0) {
        options = extend({}, config.defaults, options);
        if (typeof options.expires === 'number') {
          days = options.expires;
          t = options.expires = new Date();
          t.setDate(t.getDate() + days);
        }
        return doc.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain.split(':')[0] : '', options.secure ? '; secure' : ''].join('');
      }
      result = key ? void 0 : {};
      cookies = doc.cookie ? doc.cookie.split('; ') : [];
      for (_i = 0, _len = cookies.length; _i < _len; _i++) {
        item = cookies[_i];
        parts = item.split('=');
        name = decode(parts.shift());
        cookie = parts.join('=');
        if (key === name) {
          result = read(cookie, value);
          break;
        }
        if (!key && (cookie = read(cookie)) !== void 0) {
          result[name] = cookie;
        }
      }
      return result;
    };
    config.defaults = {
      expires: 720,
      path: '/'
    };
    _.removeCookie = function(key, options) {
      if (_.cookie(key) === void 0) {
        return false;
      }
      _.cookie(key, '', extend({}, options, {
        expires: -1
      }));
      return true;
    };
    return _;
  };

  ct.deviceInit = function(_, undef) {
    var addClass, device, documentElement, find, handleOrientation, hasClass, orientationEvent, previousDevice, removeClass, userAgent;
    previousDevice = _.device;
    device = {};
    _.device = device;
    device.info = "";
    documentElement = window.document.documentElement;
    userAgent = window.navigator.userAgent.toLowerCase();
    device.ios = function() {
      return device.iphone() || device.ipod() || device.ipad();
    };
    device.iphone = function() {
      return !device.windows() && find("iphone");
    };
    device.ipod = function() {
      return find("ipod");
    };
    device.ipad = function() {
      return find("ipad");
    };
    device.android = function() {
      return !device.windows() && find("android");
    };
    device.androidPhone = function() {
      return device.android() && find("mobile");
    };
    device.androidTablet = function() {
      return device.android() && !find("mobile");
    };
    device.blackberry = function() {
      return find("blackberry") || find("bb10") || find("rim");
    };
    device.blackberryPhone = function() {
      return device.blackberry() && !find("tablet");
    };
    device.blackberryTablet = function() {
      return device.blackberry() && find("tablet");
    };
    device.windows = function() {
      return find("windows");
    };
    device.windowsPhone = function() {
      return device.windows() && find("phone");
    };
    device.windowsTablet = function() {
      return device.windows() && (find("touch") && !device.windowsPhone());
    };
    device.fxos = function() {
      return (find("(mobile;") || find("(tablet;")) && find("; rv:");
    };
    device.fxosPhone = function() {
      return device.fxos() && find("mobile");
    };
    device.fxosTablet = function() {
      return device.fxos() && find("tablet");
    };
    device.meego = function() {
      return find("meego");
    };
    device.cordova = function() {
      return window.cordova && location.protocol === "file:";
    };
    device.nodeWebkit = function() {
      return typeof window.process === "object";
    };
    device.mobile = function() {
      return device.androidPhone() || device.iphone() || device.ipod() || device.windowsPhone() || device.blackberryPhone() || device.fxosPhone() || device.meego();
    };
    device.tablet = function() {
      return device.ipad() || device.androidTablet() || device.blackberryTablet() || device.windowsTablet() || device.fxosTablet();
    };
    device.desktop = function() {
      return !device.tablet() && !device.mobile();
    };
    device.television = function() {
      var i, television;
      television = ["googletv", "viera", "smarttv", "internet.tv", "netcast", "nettv", "appletv", "boxee", "kylo", "roku", "dlnadoc", "roku", "pov_tv", "hbbtv", "ce-html"];
      i = 0;
      while (i < television.length) {
        if (find(television[i])) {
          return true;
        }
        i++;
      }
      return false;
    };
    device.portrait = function() {
      return (window.innerHeight / window.innerWidth) > 1;
    };
    device.landscape = function() {
      return (window.innerHeight / window.innerWidth) < 1;
    };
    device.noConflict = function() {
      _.device = previousDevice;
      return this;
    };
    find = function(needle) {
      return userAgent.indexOf(needle) !== -1;
    };
    hasClass = function(className) {
      var regex;
      regex = new RegExp(className, "i");
      return device.info.match(regex);
    };
    addClass = function(className) {
      var currentClassNames;
      currentClassNames = null;
      if (!hasClass(className)) {
        currentClassNames = device.info.replace(/^\s+|\s+$/g, "");
        return device.info = currentClassNames + " " + className;
      }
    };
    removeClass = function(className) {
      if (hasClass(className)) {
        return device.info = device.info.replace(" " + className, " ");
      }
    };
    if (device.ios()) {
      if (device.ipad()) {
        addClass("ios ipad tablet");
      } else if (device.iphone()) {
        addClass("ios iphone mobile");
      } else {
        if (device.ipod()) {
          addClass("ios ipod mobile");
        }
      }
    } else if (device.android()) {
      if (device.androidTablet()) {
        addClass("android tablet");
      } else {
        addClass("android mobile");
      }
    } else if (device.blackberry()) {
      if (device.blackberryTablet()) {
        addClass("blackberry tablet");
      } else {
        addClass("blackberry mobile");
      }
    } else if (device.windows()) {
      if (device.windowsTablet()) {
        addClass("windows tablet");
      } else if (device.windowsPhone()) {
        addClass("windows mobile");
      } else {
        addClass("desktop");
      }
    } else if (device.fxos()) {
      if (device.fxosTablet()) {
        addClass("fxos tablet");
      } else {
        addClass("fxos mobile");
      }
    } else if (device.meego()) {
      addClass("meego mobile");
    } else if (device.nodeWebkit()) {
      addClass("node-webkit");
    } else if (device.television()) {
      addClass("television");
    } else {
      if (device.desktop()) {
        addClass("desktop");
      }
    }
    if (device.cordova()) {
      addClass("cordova");
    }
    handleOrientation = function() {
      if (device.landscape()) {
        removeClass("portrait");
        return addClass("landscape");
      } else {
        removeClass("landscape");
        return addClass("portrait");
      }
    };
    if (Object.prototype.hasOwnProperty.call(window, "onorientationchange")) {
      orientationEvent = "orientationchange";
    } else {
      orientationEvent = "resize";
    }
    if (window.addEventListener) {
      window.addEventListener(orientationEvent, handleOrientation, false);
    } else if (window.attachEvent) {
      window.attachEvent(orientationEvent, handleOrientation);
    } else {
      window[orientationEvent] = handleOrientation;
    }
    handleOrientation();
    if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
      define(function() {
        return device;
      });
    } else if (typeof module !== "undefined" && module.exports) {
      module.exports = device;
    } else {
      _.device = device;
    }
    return _;
  };

  ct.toolInit = function(_, undef) {
    var COOKIE_NAME, CustomError, ObjProto, createUID, doc, docEle, ec, isType, length, nativeIsArray, originalSplice, style, toString;
    if (_ == null) {
      _ = {};
    }
    win = window;
    doc = document;
    ec = encodeURIComponent;
    docEle = doc.documentElement;
    ObjProto = Object.prototype;
    nativeIsArray = Array.isArray;
    toString = ObjProto.toString;
    length = "length";
    style = "style";
    COOKIE_NAME = '_ct_uid';
    createUID = function() {
      var random, timestamp;
      timestamp = _.time();
      random = _.intval(Math.random() * timestamp);
      if (random < 100000000) {
        random += 100000000;
      }
      return [timestamp.toString(16), random.toString(16)].join('.');
    };
    CustomError = function(message) {
      this.name = "Cogtu Error";
      return this.message = message;
    };
    CustomError.prototype = new Error;
    CustomError.prototype.constructor = CustomError;
    _.CustomError = CustomError;
    _.version = function(fn) {
      if (typeof fn === "function") {
        fn(CT_VERSION);
      }
      return CT_VERSION;
    };
    _.time = function() {
      return _.intval((new Date()).valueOf() / 1000);
    };
    _.uid = function(domain) {
      var uid;
      if (domain == null) {
        domain = '';
      }
      uid = _.cookie(COOKIE_NAME);
      if (uid) {
        return uid;
      }
      uid = createUID();
      _.cookie(COOKIE_NAME, uid, {
        domain: domain
      });
      return uid;
    };
    isType = function(type) {
      return function(obj) {
        return Object.prototype.toString.call(obj) === "[object " + type + "]" && !(_.isUndefined(obj));
      };
    };
    _.isString = isType("String");
    _.isFunction = isType("Function");
    _.isArray = nativeIsArray || isType("Array");
    _.isObject = isType("Object");
    _.isUndefined = function(obj) {
      return obj === undef;
    };
    _.isNumber = function(obj) {
      return toString.call(obj) === '[object Number]';
    };
    _.map = _.collect = function(obj, iterator, context) {
      var index, results, value, _i, _len;
      results = [];
      if (!obj) {
        return results;
      }
      for (index = _i = 0, _len = obj.length; _i < _len; index = ++_i) {
        value = obj[index];
        results[results.length] = iterator.call(context, value, index, obj);
      }
      return results;
    };
    _.intval = function(value, mod) {
      if (mod == null) {
        mod = 10;
      }
      return parseInt(value, mod) || 0;
    };
    _.trim = function(name) {
      if (name) {
        return name.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
      } else {
        return "";
      }
    };
    _.clone = function(obj) {
      var attr, copy, i, len;
      if (null === obj || "object" !== typeof obj) {
        return obj;
      }
      if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
      }
      if (obj instanceof Array) {
        copy = [];
        i = 0;
        len = obj.length;
        while (i < len) {
          copy[i] = _.clone(obj[i]);
          ++i;
        }
        return copy;
      }
      if (obj instanceof Object) {
        copy = {};
        for (attr in obj) {
          if (obj.hasOwnProperty(attr)) {
            copy[attr] = _.clone(obj[attr]);
          }
        }
        return copy;
      }
      throw new Error("Unable to copy obj! Its type isn't supported.");
    };
    _.toArray = function(arr) {
      if (!arr[length]) {
        return [];
      }
      if (!match) {
        return Array.prototype.slice.call(arr, 0);
      } else {
        return (function(element) {
          var OWNER_DOCUMENT, callbacks, current;
          current = element[length];
          callbacks = [];
          OWNER_DOCUMENT = 0;
          while (OWNER_DOCUMENT < current && (doc = element[OWNER_DOCUMENT])) {
            callbacks[i](doc);
            OWNER_DOCUMENT++;
          }
          return callbacks;
        })(arr);
      }
    };
    _.getElementByAttr = function(elem, attr, value, content, enableDataset) {
      var elems, i, item, _content;
      _content = content || doc.body;
      if (!enableDataset) {
        enableDataset = false;
      }
      elems = _content.getElementsByTagName(elem);
      for (i in elems) {
        item = elems[i];
        if (enableDataset && _.isDom(item) && item.dataset && item.dataset[attr] && item.dataset[attr].toLowerCase() === value.toLowerCase()) {
          return item;
        }
        if (_.isDom(item) && (item.getAttribute(attr) || item[attr]) && (item.getAttribute(attr).toLowerCase() || item[attr].toLowerCase()) === value.toLowerCase()) {
          return item;
        }
      }
    };
    _.setAttrs = function(elem, attrs) {
      var attr;
      for (attr in attrs) {
        if (attr === "clsName") {
          if (elem.classList) {
            return elem.classList.add(attrs[attr]);
          }
          elem.className += " " + attrs[attr];
        } else {
          elem.setAttribute(attr, attrs[attr]);
        }
      }
    };
    _.setStyle = function(elem, style) {
      var s, sty;
      sty = ' ';
      if (_.isString(style)) {
        sty = style;
      } else if (_.isObject(style)) {
        for (s in style) {
          sty += s + ':' + style[s] + ';';
        }
      }
      return elem.style.cssText += ';' + sty;
    };
    _.isDom = function(obj) {
      if (obj && obj.nodeType && obj.nodeType === 1) {
        return true;
      }
      return false;
    };
    _.createDom = function(nodeType, attrs, styles) {
      var elem;
      elem = doc.createElement(nodeType);
      _.setAttrs(elem, attrs);
      _.setStyle(elem, styles);
      return elem;
    };
    _.removeDom = function(elem) {
      if (elem) {
        return elem.parentNode.removeChild(elem);
      }
    };
    _.insertAfter = function(newElem, targetElem) {
      var parent;
      parent = targetElem.parentNode;
      if (parent.lastChild === targetElem) {
        return parent.appendChild(newElem);
      } else {
        return parent.insertBefore(newElem, _.getNextNode(targetElem));
      }
    };
    if (!win.getComputedStyle) {
      win.getComputedStyle = function(el, pseudo) {
        this.el = el;
        this.getPropertyValue = function(prop) {
          var re;
          re = /(\-([a-z]){1})/g;
          if (prop === 'float') {
            prop = 'styleFloat';
          }
          if (re.test(prop)) {
            prop = prop.replace(re, function() {
              return arguments[2].toUpperCase();
            });
          }
          if (el.currentStyle[prop]) {
            return el.currentStyle[prop];
          } else {
            return null;
          }
        };
        return this;
      };
    }
    if (!Array.prototype.forEach) {
      Array.prototype.forEach = function(fun) {
        var i, len, thisp, _results;
        len = this.length;
        if (typeof fun !== 'function') {
          throw new TypeError;
        }
        thisp = arguments[1];
        i = 0;
        _results = [];
        while (i < len) {
          if (i in this) {
            fun.call(thisp, this[i], i, this);
          }
          _results.push(i++);
        }
        return _results;
      };
    }
    if (!doc.querySelectorAll) {
      doc.querySelectorAll = doc.body.querySelectorAll = Object.querySelectorAll = function(selector) {
        var all, ex, i, len, selectors, stylesheet;
        try {
          selectors = [];
          i = 0;
          all = doc.all;
          len = all.length;
          stylesheet = doc.styleSheets || [doc.createStyleSheet()];
          if (stylesheet.length > 0) {
            stylesheet[0].addRule(selector, 'k:v');
          }
          while (i < len) {
            if (all[i].currentStyle['k'] === 'v') {
              selectors.push(all[i]);
            }
            i++;
          }
          return selectors;
        } catch (_error) {
          ex = _error;
          return false;
        }
      };
    }
    if (!doc.querySelector) {
      doc.querySelector = doc.body.querySelector = Object.querySelector = function(selector) {
        return this.querySelectorAll(selector)[0];
      };
    }
    if (doc.documentMode && doc.documentMode < 9) {
      originalSplice = Array.prototype.splice;
      Array.prototype.splice = function() {
        var arr, i, max;
        arr = [];
        i = 0;
        max = arguments.length;
        while (i < max) {
          arr.push(arguments[i]);
          i++;
        }
        if (arr.length === 1) {
          arr.push(this.length - arr[0]);
        }
        return originalSplice.apply(this, arr);
      };
    }
    if (typeof win.JSON !== 'object') {
      win.JSON = {};
    }
    (function() {
      var f, gap, indent, meta, quote, rep, rx_dangerous, rx_escapable, rx_four, rx_one, rx_three, rx_two, str, this_value;
      f = function(n) {
        if (n < 10) {
          return '0' + n;
        } else {
          return n;
        }
      };
      this_value = function() {
        return this.valueOf();
      };
      quote = function(string) {
        rx_escapable.lastIndex = 0;
        if (rx_escapable.test(string)) {
          return '"' + string.replace(rx_escapable, (function(a) {
            var c;
            c = meta[a];
            if (typeof c === 'string') {
              return c;
            } else {
              return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            }
          })) + '"';
        } else {
          return '"' + string + '"';
        }
      };
      str = function(key, holder) {
        var gap, i, k, mind, partial, v, value;
        mind = gap;
        value = holder[key];
        if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
          value = value.toJSON(key);
        }
        if (typeof rep === 'function') {
          value = rep.call(holder, key, value);
        }
        switch (typeof value) {
          case 'string':
            return quote(value);
          case 'number':
            if (isFinite(value)) {
              return String(value);
            } else {
              return 'null';
            }
          case 'boolean':
          case 'null':
            return String(value);
          case 'object':
            if (!value) {
              return 'null';
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === '[object Array]') {
              length = value.length;
              i = 0;
              while (i < length) {
                partial[i] = str(i, value) || 'null';
                i += 1;
              }
              v = partial.length === 0 ? '[]' : gap ? '[\n' + partial.join(',\n') + '\n]' : '[' + partial.join(',') + ']';
              gap = mind;
              return v;
            }
            if (rep && typeof rep === 'object') {
              length = rep.length;
              i = 0;
              while (i < length) {
                if (typeof rep[i] === 'string') {
                  k = rep[i];
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ': ' : ':') + v);
                  }
                }
                i += 1;
              }
            } else {
              for (k in value) {
                k = k;
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ': ' : ':') + v);
                  }
                }
              }
            }
            v = partial.length === 0 ? '{}' : gap ? '{' + partial.join(',') + '}' : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
      };
      'use strict';
      rx_one = /^[\],:{}\s]*$/;
      rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
      rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
      rx_four = /(?:^|:|,)(?:\s*\[)+/g;
      rx_escapable = /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
      rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
      if (typeof Date.prototype.toJSON !== 'function') {
        Date.prototype.toJSON = function() {
          if (isFinite(this.valueOf())) {
            return this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z';
          } else {
            return null;
          }
        };
        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value;
      }
      gap = "";
      indent = "";
      meta = "";
      rep = "";
      if (typeof win.JSON.stringify !== 'function') {
        meta = {
          '\b': '\\b',
          '\t': '\\t',
          '\n': '\\n',
          '\f': '\\f',
          '\r': '\\r',
          '"': '\\"',
          '\\': '\\\\'
        };
        win.JSON.stringify = function(value, replacer, space) {
          var i, tmp;
          gap = '';
          indent = '';
          if (typeof space === 'number') {
            i = 0;
            while (i < space) {
              indent += ' ';
              i += 1;
            }
          } else if (typeof space === 'string') {
            indent = space;
          }
          rep = replacer;
          if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
            throw new Error('JSON.stringify');
          }
          tmp = str('', {
            '': value
          });
          return tmp;
        };
      }
      if (typeof win.JSON.parse !== 'function') {
        win.JSON.parse = function(text, reviver) {
          var j, walk;
          j = undef;
          walk = function(holder, key) {
            var k, v, value;
            k = undef;
            v = undef;
            value = holder[key];
            if (value && typeof value === 'object') {
              for (k in value) {
                k = k;
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                  v = walk(value, k);
                  if (v !== undef) {
                    value[k] = v;
                  } else {
                    delete value[k];
                  }
                }
              }
            }
            return reviver.call(holder, key, value);
          };
          text = String(text);
          rx_dangerous.lastIndex = 0;
          if (rx_dangerous.test(text)) {
            text = text.replace(rx_dangerous, function(a) {
              return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            });
          }
          if (rx_one.test(text.replace(rx_two, '@').replace(rx_three, ']').replace(rx_four, ''))) {
            j = eval('(' + text + ')');
            if (typeof reviver === 'function') {
              return walk({
                '': j
              }, '');
            } else {
              return j;
            }
          }
          throw new SyntaxError('JSON.parse');
        };
      }
    })();
    _.JSONP = (function() {
      var config, counter, head, jsonp, load, setDefaults;
      counter = 0;
      head = void 0;
      win = this;
      config = {};
      load = function(url, pfnError) {
        var done, errorHandler, script;
        script = doc.createElement('script');
        done = false;
        script.src = url;
        script.async = true;
        errorHandler = pfnError || config.error;
        if (typeof errorHandler === 'function') {
          script.onerror = function(ex) {
            return errorHandler({
              url: url,
              event: ex
            });
          };
        }
        script.onload = script.onreadystatechange = function() {
          if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
            done = true;
            script.onload = script.onreadystatechange = null;
            if (script && script.parentNode) {
              script.parentNode.removeChild(script);
            }
          }
        };
        if (!head) {
          head = doc.getElementsByTagName('head')[0];
        }
        return head.appendChild(script);
      };
      jsonp = function(url, params, callback, callbackName) {
        var key, query, uniqueName;
        query = (url || '').indexOf('?') === -1 ? '?' : '&';
        key = void 0;
        callbackName = callbackName || config['callbackName'] || 'callback';
        uniqueName = callbackName;
        params = params || {};
        for (key in params) {
          key = key;
          if (params.hasOwnProperty(key)) {
            query += ec(key) + '=' + ec(params[key]) + '&';
          }
        }
        win[uniqueName] = function(data) {
          var e;
          callback(data);
          try {
            delete win[uniqueName];
          } catch (_error) {
            e = _error;
          }
          win[uniqueName] = null;
        };
        load(url + query + callbackName + '=' + uniqueName);
        return uniqueName;
      };
      setDefaults = function(obj) {
        return config = obj;
      };
      return {
        get: jsonp,
        init: setDefaults
      };
    })();
    _.getStyleValue = function(elem, prop) {
      var arr, style_value;
      arr = {
        "width": "",
        "height": "",
        "borderLeftWidth": "",
        "borderTopWidth": "",
        "borderRightWidth": "",
        "borderBottomWidth": "",
        "paddingLeft": "",
        "paddingTop": "",
        "paddingRight": "",
        "paddingBottom": "",
        "marginLeft": "",
        "marginTop": "",
        "marginRight": "",
        "marginBottom": "",
        "zIndex": ""
      };
      if (_.isDom(elem)) {
        style_value = _.intval(elem.style[prop]) || _.intval(getComputedStyle(elem, null)[prop]) || _.intval(getComputedStyle(elem, null).getPropertyValue(prop));
        if (prop in arr && prop === "height") {
          return style_value || _.intval(elem.height) || (_.intval(elem.clientHeight) - _.getStyleValue(elem, "paddingTop"));
        }
        if (prop in arr && prop === "width") {
          return style_value || _.intval(elem.width) || (_.intval(elem.clientWidth) - _.getStyleValue(elem, "paddingLeft"));
        }
        if (prop in arr) {
          return style_value;
        }
        return elem.style[prop] || getComputedStyle(elem, null)[prop] || getComputedStyle(elem, null).getPropertyValue(prop);
      }
    };
    _.closest = function(elem, cls) {
      if (_.isDom(elem) && elem.nodeName.toLowerCase() !== "html") {
        if (_.hasClass(elem, cls)) {
          return elem;
        }
        return _.closest(elem.parentNode, cls);
      } else {
        return null;
      }
    };
    _.isHidden = function(elem) {
      var visibility, _ref;
      visibility = {
        "hidden": "",
        "collapse": ""
      };
      if (_.isDom(elem) && elem.nodeName.toLowerCase() !== "html") {
        if ((_ref = _.getStyleValue(elem, "visibility"), __indexOf.call(visibility, _ref) >= 0) || _.getStyleValue(elem, "display") === "none") {
          return true;
        }
        return _.isHidden(elem.parentNode);
      }
    };
    _.getNextNode = function(elem) {
      var nextNode, node;
      node = _.isString(elem) ? doc.getElementById(elem) : elem;
      nextNode = node.nextSibling;
      if (!nextNode) {
        return null;
      }
      if (nextNode.nodeType !== 1 && nextNode.nextSibling) {
        nextNode = nextNode.nextSibling;
      }
      return nextNode;
    };
    _.hasClass = function(elem, className) {
      var regex;
      regex = new RegExp(className, "i");
      return elem.className.match(regex);
    };
    _.domReady = function(fn) {
      var add, done, e, init, modern, poll, pre, rem, top;
      done = false;
      top = true;
      modern = doc.addEventListener;
      add = modern ? 'addEventListener' : 'attachEvent';
      rem = modern ? 'removeEventListener' : 'detachEvent';
      pre = modern ? '' : 'on';
      init = function(e) {
        if (e.type === 'readystatechange' && doc.readyState !== 'complete') {
          return;
        }
        (e.type === 'load' ? win : doc)[rem](pre + e.type, init, false);
        if (!done && (done = true)) {
          return fn.call(win, e.type || e);
        }
      };
      poll = function() {
        var e;
        try {
          docEle.doScroll('left');
        } catch (_error) {
          e = _error;
          setTimeout(poll, 50);
          return;
        }
        return init('poll');
      };
      if (doc.readyState === 'complete') {
        return fn.call(win, 'lazy');
      } else {
        if (!modern && docEle.doScroll) {
          try {
            top = !win.frameElement;
          } catch (_error) {
            e = _error;
          }
          if (top) {
            poll();
          }
        }
        doc[add](pre + 'DOMContentLoaded', init, false);
        doc[add](pre + 'readystatechange', init, false);
        return win[add](pre + 'load', init, false);
      }
    };
    _.isPropertySupported = function(property) {
      var i, prefProperty, prefixes, _property;
      if (property in doc.body.style) {
        return property;
      }
      prefixes = ['Moz', 'Webkit', 'O', 'ms', 'Khtml'];
      prefProperty = property.charAt(0).toUpperCase() + property.substr(1);
      i = 0;
      while (i < prefixes.length) {
        _property = prefixes[i] + prefProperty;
        if (_property in doc.body.style) {
          return _property;
        }
        i++;
      }
      return false;
    };
    _.orientationEventName = function() {
      var orientationEvent;
      if (Object.prototype.hasOwnProperty.call(win, "onorientationchange")) {
        orientationEvent = "orientationchange";
      } else {
        orientationEvent = "resize";
      }
      return orientationEvent;
    };
    _.parseUrl = function(url) {
      var expRet, hash, params, q, uri, urlArr;
      if (!url) {
        return {};
      }
      expRet = (new RegExp('#.*$')).exec(url);
      hash = _.isArray(expRet) ? expRet[0] : '';
      urlArr = url.replace(hash, '').split('?');
      uri = urlArr.shift();
      q = urlArr.join('?') || "";
      params = q.length > 0 ? _.map(q.split('&'), function(x) {
        return x.split('=');
      }) : [];
      return {
        uri: uri,
        params: params,
        hash: hash,
        qs: q
      };
    };
    _.findUrl = function(url, key) {
      var params, value;
      params = (_.parseUrl(url)).params;
      value = '';
      _.map(params, function(x) {
        if (x[0] === key) {
          return value = x[1];
        }
      });
      return value;
    };
    _.pageLoadTime = function() {
      var perf, timing;
      if ((!(perf = win.performance)) || (!(timing = perf.timing))) {
        return 0;
      }
      if (timing.domContentLoadedEventEnd < timing.fetchStart) {
        return 0;
      }
      return _.intval(timing.domContentLoadedEventEnd - timing.fetchStart);
    };
    _.viewWidth = function() {
      var e;
      try {
        return docEle.clientWidth || doc.body.clientWidth;
      } catch (_error) {
        e = _error;
        return 0;
      }
    };
    _.viewHeight = function() {
      var e;
      try {
        return docEle.clientHeight || doc.body.clientHeight;
      } catch (_error) {
        e = _error;
        return 0;
      }
    };
    _.scrollTop = function() {
      try {
        return _.intval(win.pageYOffset || docEle.scrollTop);
      } catch (_error) {}
      return 0;
    };
    _.scrollLeft = function() {
      try {
        return _.intval(win.pageXOffset || docEle.scrollLeft);
      } catch (_error) {}
      return 0;
    };
    _.request = function(obj) {
      var url, urls, _i, _len, _results;
      urls = _.urlFormat(obj);
      _results = [];
      for (_i = 0, _len = urls.length; _i < _len; _i++) {
        url = urls[_i];
        _results.push(_.send(url, new Image(0, 0)));
      }
      return _results;
    };
    _.urlFormat = function(obj) {
      var k, qs, urls, v;
      qs = ((function() {
        var _ref, _results;
        _ref = obj.params;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push("" + k + "=" + (ec(v)));
        }
        return _results;
      })()).join('&');
      urls = ["" + obj.protocol + "//" + obj.host + obj.path + "?" + qs];
      return urls;
    };
    _.format = function(str, arr) {
      return str.replace(/\{(\d+)\}/g, function(m, i) {
        return arr[i];
      });
    };
    _.send = function(url, mediator, callback) {
      mediator.src = url;
      return mediator.onload = function() {
        mediator.onload = null;
        return (callback || function() {})();
      };
    };
    _.random = function(len) {
      if (len == null) {
        len = 8;
      }
      return Math.random().toString().substr(2, len);
    };
    _.event = {
      add: function(elem, type, handler) {
        var _add, _attach, _on;
        _add = "addEventListener";
        _attach = "attachEvent";
        _on = "on" + type;
        if (elem[_add]) {
          return elem[_add](type, handler, false);
        } else if (elem[_attach]) {
          return elem[_attach](_on, handler);
        } else {
          return elem[_on] = handler;
        }
      },
      remove: function(elem, type, handler) {
        var _detach, _on, _rm;
        _rm = "removeEventListener";
        _detach = "detachEvent";
        _on = "on" + type;
        if (elem[_rm]) {
          return elem[_rm](type, handler, false);
        } else if (elem[_detach]) {
          return elem[_detach](_on, handler);
        } else {
          return elem[_on] = null;
        }
      },
      event: function(e) {
        return e || win.event;
      },
      target: function(e) {
        return e && (e.target || e.srcElement || null);
      }
    };
    _.decodeBase62 = function(s) {
      var alphabet, base, i, power, sum;
      base = 62;
      power = 1;
      alphabet = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      sum = 0;
      i = s.length - 1;
      while (i >= 0) {
        sum += alphabet.indexOf(s[i]) * power;
        power *= base;
        i--;
      }
      return sum;
    };
    _.pxorpc = function(s, u) {
      if (~~s) {
        return s + 'px';
      } else {
        return s;
      }
    };
    return _;
  };

  ct.packerInit = function(_, undef) {
    var _create;
    win = window;
    _create = function(sid, settings) {
      var siteId, _ct;
      siteId = sid.toLowerCase();
      if (settings && _.isObject(settings)) {
        settings;
      }
      _ct = new _.Cogtu(siteId, settings);
      return win.noautoad = true;
    };
    return {
      _create: _create
    };
  };

  ct.adInit = function(_, undef) {
    var Cogtu, CogtuAd, DefaultDispatchParams, body, closeIcon, cogtu_ad, createAdContainer, createCgSlot, customs, decodeWeiboId, doc, docEle, ec, getDeviceType, getImgIdBySrc, getOrientation, getPublisherId, getSinaPhotoSlots, getSlots, loc, localStorage, mersenne, mock, trans, view;
    win = window;
    doc = document;
    localStorage = win.localStorage;
    docEle = doc.documentElement;
    body = doc.body;
    loc = doc.location;
    ec = encodeURIComponent;
    mersenne = 9990;
    trans = "http://js.tuscdn.com/res/tran.png";
    mock = "http://123.56.4.172/p.gif?impress";
    closeIcon = {
      "60x18": "http://js.tuscdn.com/res/clsbtn-60x18.gif"
    };
    view = {
      width: _.viewWidth(),
      height: _.viewHeight()
    };
    customs = {
      "weibo": {
        domain: "m.weibo.cn"
      },
      "sinaPhoto": {
        domain: "photo.sina.cn",
        imgContainer: "wrap_all"
      }
    };
    createCgSlot = function(elem) {
      var cgSlot;
      cgSlot = _.createDom("div", {
        "clsName": "cg-slot"
      });
      if (_.isDom(_.getNextNode(elem))) {
        elem = _.getNextNode(elem);
      }
      return _.insertAfter(cgSlot, elem);
    };
    getSinaPhotoSlots = function(settings) {
      var i, img_url, imgs, imp, item, item_height, item_width;
      imgs = [];
      if (settings && settings.imgContainer && doc.getElementById(settings.imgContainer)) {
        imgs = doc.getElementById(settings.imgContainer).getElementsByTagName("img");
      } else {
        imgs = doc.getElementsByTagName("img");
      }
      imp = [];
      for (i in imgs) {
        item = imgs[i];
        item_width = _.getStyleValue(item, "width");
        item_height = _.getStyleValue(item, "height");
        if (item && item_width >= 1 && item_height >= 1) {
          img_url = item.dataset.src || item.dataset.smallsrc;
          if (img_url) {
            imp.push(img_url);
          }
        }
      }
      return imp;
    };
    getSlots = function(settings) {
      var i, imgs, imp, item, item_height, item_width;
      imgs = [];
      if (settings && settings.imgContainer && doc.getElementById(settings.imgContainer)) {
        imgs = doc.getElementById(settings.imgContainer).getElementsByTagName("img");
      } else {
        imgs = doc.getElementsByTagName("img");
      }
      imp = [];
      for (i in imgs) {
        item = imgs[i];
        item_width = _.getStyleValue(item, "width");
        item_height = _.getStyleValue(item, "height");
        if (item && item_width >= 255 && item_height >= 255) {
          imp.push(item.getAttribute("src"));
        }
      }
      return imp;
    };
    getPublisherId = function() {
      var puid;
      puid = null;
      if (!_.isUndefined(localStorage) && localStorage.getItem("H5_UID") !== null) {
        puid = localStorage.getItem("H5_UID");
      }
      if (puid === null && !_.isUndefined(win.$render_data)) {
        puid = win.$render_data.common.uid;
      }
      return puid || "";
    };
    getImgIdBySrc = function(src) {
      return src.split("/").reverse()[0].split(".")[0];
    };
    decodeWeiboId = function(s) {
      var p0, p1, p2;
      p0 = _.decodeBase62(s.substr(0, s.length - 8));
      p1 = _.decodeBase62(s.substr(-8, 4));
      p2 = _.decodeBase62(s.substr(-4, 4));
      return p0.toString() + p1.toString() + p2.toString();
    };
    getDeviceType = function() {
      if (_.device.mobile()) {
        return 0;
      }
      if (_.device.tablet()) {
        return 1;
      }
      if (_.device.desktop()) {
        return 2;
      }
      if (_.device.television()) {
        return 3;
      }
    };
    getOrientation = function() {
      if (_.device.landscape()) {
        return 1;
      }
      if (_.device.portrait()) {
        return 2;
      }
      return 0;
    };
    DefaultDispatchParams = {
      slotid: "",
      sdkver: _.version(),
      imp: [],
      user: {
        uid: _.uid(loc.host || loc.hostname),
        puid: getPublisherId()
      },
      content: {
        pageuri: loc.href || "",
        ref: doc.referrer || "",
        viewport: [view.width, view.height].join("x"),
        ext: {},
        refext: {}
      },
      device: {
        geo: {
          lat: "",
          lon: "",
          accu: ""
        },
        language: (navigator.language || navigator.browserLanguage).toLowerCase(),
        devicetype: getDeviceType(),
        sc: [win.screen.width, win.screen.height].join("x"),
        devicepixelratio: win.devicePixelRatio || 1,
        orientation: 0,
        ts: ""
      }
    };
    createAdContainer = function() {
      var adContainer, close, container;
      container = doc.getElementById("cogtu-ad");
      if (_.isDom(container)) {
        return container;
      }
      adContainer = _.createDom("ins", {
        id: "cogtu-ad"
      }, {
        border: "none",
        margin: 0,
        padding: 0,
        background: "none",
        position: "static"
      });
      body.appendChild(adContainer);
      if (loc.hostname === customs.weibo.domain) {
        _.setStyle(adContainer, {
          margin: "0 auto",
          position: "relative",
          "z-index": "10000",
          top: 0,
          display: "none"
        });
        close = _.createDom("img", {
          src: closeIcon["60x18"],
          name: "cogtu_ad-close"
        }, {
          display: "block",
          "z-index": mersenne,
          position: "absolute",
          top: "1px",
          right: "1px"
        });
        adContainer.appendChild(close);
        _.event.add(close, "click", function(evt) {
          var tgt;
          tgt = evt.target;
          container = _.closest(tgt, "cogtu-ad");
          return _.removeDom(container);
        });
      }
      return adContainer;
    };
    cogtu_ad = {};
    cogtu_ad.inited = false;
    cogtu_ad.Container = createAdContainer();
    cogtu_ad.init = function() {
      var _this = this;
      if (!cogtu_ad.inited) {
        cogtu_ad.Ads = [];
        _.event.add(win, "resize", function() {
          return setTimeout(cogtu_ad.reposition, 1000);
        });
        cogtu_ad.reposition();
        return cogtu_ad.inited = true;
      }
    };
    cogtu_ad.tokenize = function(s, o) {
      var tr;
      tr = function(t, k) {
        return ec(o[k] || k);
      };
      return s.replace(/\$\{([^\}]+)\}/g, tr);
    };
    cogtu_ad.offset = function(el) {
      var ex, height, left, rect, top, width;
      width = el.offsetWidth;
      height = el.offsetHeight;
      top = 0;
      left = 0;
      rect = false;
      if (el.getBoundingClientRect) {
        try {
          rect = el.getBoundingClientRect();
          top = ~~rect.top + Math.max(win.pageYOffset || 0, docEle.scrollTop, body.scrollTop, 0) - Math.max(docEle.clientTop, body.clientTop, 0);
          left = ~~rect.left + Math.max(win.pageXOffset || 0, docEle.scrollLeft, body.scrollLeft, 0) - Math.max(docEle.clientLeft, body.clientLeft, 0);
        } catch (_error) {
          ex = _error;
          rect = false;
          top = 0;
          left = 0;
        }
      }
      if (!rect) {
        while (true) {
          top += el.offsetTop;
          left += el.offsetLeft;
          if (!(el = el.offsetParent)) {
            break;
          }
        }
      }
      return {
        top: top,
        t: top,
        bottom: top + height,
        b: top + height,
        left: left,
        l: left,
        right: left + width,
        r: left + width,
        height: height,
        h: height,
        width: width,
        w: width
      };
    };
    cogtu_ad.inView = function(el) {
      var eo, sb, st;
      eo = cogtu_ad.offset(el);
      st = _.intval(body.scrollTop) || _.intval(docEle.scrollTop);
      sb = st + docEle.clientHeight;
      return eo.t > st && eo.b < sb || eo.t > st && eo.t < sb || eo.b < sb && eo.b > st || eo.t < st && eo.b > sb;
    };
    cogtu_ad.reposition = function() {
      cogtu_ad.Ads.forEach(function(_this) {
        return _this.position();
      });
      if (cogtu_ad.sto) {
        clearTimeout(cogtu_ad.sto);
      }
      return cogtu_ad.sto = setTimeout(cogtu_ad.reposition, 500);
    };
    cogtu_ad.getTarget = function(target, attr, enableDataset) {
      if (!target) {
        return;
      }
      switch (true) {
        case _.isString(target) && /\.[jpe?g|png|gif]/.test(target.toLowerCase()):
          return _.getElementByAttr("img", attr, target, doc, enableDataset) || _.getElementByAttr("img", "src", target);
        case target.tagName && target.tagName.toLowerCase() === 'img':
          return target;
        default:
          return false;
      }
    };
    cogtu_ad.getEI = function(element) {
      var offset, parent;
      offset = {
        left: 0,
        top: 0
      };
      parent = element;
      while (parent) {
        if (doc.documentMode && doc.documentMode === 8) {
          offset.left += parent.offsetLeft;
          offset.top += parent.offsetTop;
        } else {
          offset.left += parent.offsetLeft + _.getStyleValue(parent, "borderLeftWidth");
          offset.top += parent.offsetTop + _.getStyleValue(parent, "borderTopWidth");
        }
        parent = parent.offsetParent;
      }
      if (!(doc.documentMode && doc.documentMode === 8)) {
        offset.left += _.getStyleValue(element, "paddingLeft");
        offset.top += _.getStyleValue(element, "paddingTop");
      }
      return {
        h: element.height,
        w: element.width,
        left: offset.left,
        top: offset.top
      };
    };
    CogtuAd = function(target, file, size, options) {
      'use strict';
      var nextNode, thiz;
      cogtu_ad.init();
      thiz = this;
      options.inview = true;
      options.housing = true;
      this.options = options;
      this.closeBtnName = "clsbtn_" + _.random();
      if (loc.hostname === customs.sinaPhoto.domain) {
        this.target = cogtu_ad.getTarget(target, "src", true) || cogtu_ad.getTarget(target, "smallsrc", true);
      } else {
        this.target = cogtu_ad.getTarget(target);
      }
      this.shown = false;
      if (!this.target || this.target.length < 1 || _.isUndefined(this.target)) {
        return {};
      }
      mersenne = _.getStyleValue(this.target, "zIndex");
      if (_.isDom(this.target)) {
        this.cogtuSlot = createCgSlot(this.target);
      }
      nextNode = _.getNextNode(this.target);
      if (_.isDom(nextNode) && !(_.hasClass(nextNode, "cg-slot"))) {
        this.nextNode = nextNode;
      }
      if (_.isArray(size)) {
        this.size = {
          w: ~~size[0],
          h: ~~size[1] || size
        };
      }
      this.adcode = cogtu_ad.tokenize(file, this.target);
      if (this.adcode === false) {
        return {};
      }
      this.ad = this.buildAd(target, mersenne);
      if (this.options.inview) {
        if (this.interval) {
          clearInterval(this.interval);
        }
        this.interval = setInterval((function() {
          var clsBtn;
          if (cogtu_ad.inView(thiz.target)) {
            clearInterval(thiz.interval);
            cogtu_ad.Container.appendChild(thiz.ad);
            clsBtn = doc.getElementById(thiz.closeBtnName);
            _.event.add(clsBtn, "click", function() {
              return thiz.closeCogtuAd();
            });
            return thiz.shown = true;
          }
        }), 250);
      } else {
        cogtu_ad.Container.appendChild(this.ad);
        _.event.add(doc.getElementById(this.closeBtnName), "click", function() {
          return thiz.closeCogtuAd();
        });
        this.shown = true;
      }
      cogtu_ad.Ads.push(this);
      this.position();
      return thiz;
    };
    CogtuAd.prototype.buildAd = function(placement_url, mersenne) {
      var ad, cll, html, onClick, thiz, tmp;
      ad = doc.createElement('div');
      ad = _.createDom('div', {
        "placement": placement_url
      }, {
        "position": "absolute",
        "margin": 0,
        "padding": 0,
        "visibility": "hidden"
      });
      thiz = this;
      html = [];
      onClick = function() {
        switch (true) {
          case _.isFunction(thiz.options.click):
            thiz.options.click.call(thiz);
            break;
          case _.isString(thiz.options.click):
            win.open(cogtu_ad.tokenize(thiz.options.click, thiz.target), '_blank');
            break;
          default:
            break;
        }
        return false;
      };
      cll = _.createDom("div", {}, {
        "top": 0,
        "left": 0,
        "position": "absolute",
        "cursor": "pointer",
        "background": "transparent url(" + trans + ") repeat scroll 0 0",
        "_background": "none",
        "_filter": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src=" + trans + ")",
        "width": "100%",
        "height": "100%"
      });
      if (mersenne) {
        _.setStyle(ad, {
          "z-index": mersenne
        });
        _.setStyle(cll, {
          "z-index": mersenne + 1
        });
      }
      if (this.options.click) {
        if (this.options.directClick) {
          ad.click(onClick);
        } else {
          _.event.add(cll, "click", onClick);
          ad.appendChild(cll);
        }
      }
      tmp = this.options;
      html.push('<div style="position:relative;height:100%;width:100%;background:transparent;color:inherit;font:normal normal normal 12px/0.5 Arial;margin-top:0px;opacity:' + (tmp.opacity || 1) + ';">');
      if (tmp.adsby !== false) {
        if (mersenne) {
          html.push('<a href="#" style="position:absolute;bottom:' + _.pxorpc(tmp.adsbyBottom || 'auto') + ';top:' + _.pxorpc(tmp.adsbyTop || 'auto') + ';left:' + _.pxorpc(tmp.adsbyLeft || 'auto') + ';right:' + _.pxorpc(tmp.adsbyRight || 'auto') + ';color:' + (tmp.adsbyColor || '#000') + ';font:normal normal ' + (tmp.adsbySize || '10') + '/1 Arial;text-decoration:none;z-index:' + (mersenne + 2) + ';">' + (tmp.adsbyTxt || ' ') + '</a>');
        } else {
          html.push('<a href="#" style="position:absolute;bottom:' + _.pxorpc(tmp.adsbyBottom || 'auto') + ';top:' + _.pxorpc(tmp.adsbyTop || 'auto') + ';left:' + _.pxorpc(tmp.adsbyLeft || 'auto') + ';right:' + _.pxorpc(tmp.adsbyRight || 'auto') + ';color:' + (tmp.adsbyColor || '#000') + ';font:normal normal ' + (tmp.adsbySize || '10') + '/1 Arial;text-decoration:none;">' + (tmp.adsbyTxt || ' ') + '</a>');
        }
      }
      if (tmp.close !== false) {
        if (mersenne) {
          tmp.closeBtn = '<img id="' + this.closeBtnName + '" src="' + tmp.closeBtn + '" style="position:absolute;top:' + _.pxorpc(tmp.closeTop || 'auto') + ';bottom:' + _.pxorpc(tmp.closeBottom || 'auto') + ';right:' + _.pxorpc(tmp.closeRight || 'auto') + ';z-index:' + (mersenne + 3) + ';">';
        } else {
          tmp.closeBtn = '<img id="' + this.closeBtnName + '" src="' + tmp.closeBtn + '" style="position:absolute;top:' + _.pxorpc(tmp.closeTop || 'auto') + ';bottom:' + _.pxorpc(tmp.closeBottom || 'auto') + ';right:' + _.pxorpc(tmp.closeRight || 'auto') + ';">';
        }
        html.push(tmp.closeBtn);
      }
      html.push(this.adcode);
      html.push('</div>');
      ad.innerHTML = html.join('');
      return ad;
    };
    CogtuAd.prototype.closeCogtuAd = function() {
      if (cogtu_ad && cogtu_ad.Ads && _.isFunction(cogtu_ad.Ads.splice) && _.isFunction(cogtu_ad.Ads.indexOf)) {
        cogtu_ad.Ads.splice(cogtu_ad.Ads.indexOf(this), 1);
      }
      if (_.isDom(this.cogtuSlot)) {
        this.cogtuSlot.style.cssText = "";
      }
      _.removeDom(this.ad);
      return this.ad = null;
    };
    CogtuAd.prototype.position = function() {
      var ad, ad_height, ad_width, adts, borderBottomWidth, borderLeftWidth, borderRightWidth, borderTopWidth, fpos, j_slide, nextnode_height, nextnode_margintop, nextnode_paddingtop, paddingBottom, paddingLeft, paddingRight, paddingTop, placement_url, pos, ts, wrap_all;
      if (!this.shown) {
        return;
      }
      ts = cogtu_ad.getEI(this.target);
      ad = this.ad;
      pos = undef;
      fpos = {};
      if (!ad) {
        return;
      }
      borderLeftWidth = _.getStyleValue(ad, "borderLeftWidth");
      borderTopWidth = _.getStyleValue(ad, "borderTopWidth");
      borderRightWidth = _.getStyleValue(ad, "borderRightWidth");
      borderBottomWidth = _.getStyleValue(ad, "borderBottomWidth");
      paddingLeft = _.getStyleValue(ad, "paddingLeft");
      paddingTop = _.getStyleValue(ad, "paddingTop");
      paddingRight = _.getStyleValue(ad, "paddingRight");
      paddingBottom = _.getStyleValue(ad, "paddingBottom");
      ad_width = _.getStyleValue(ad, "width");
      ad_height = _.getStyleValue(ad, "height");
      adts = {
        w: borderLeftWidth + borderRightWidth + paddingLeft + paddingRight + ad_width,
        h: borderTopWidth + borderBottomWidth + paddingTop + paddingBottom + ad_height
      };
      nextnode_height = 0;
      if (_.isDom(this.nextNode)) {
        nextnode_margintop = _.getStyleValue(this.nextNode, "marginTop");
        nextnode_paddingtop = _.getStyleValue(this.nextNode, "paddingTop");
        nextnode_height = _.getStyleValue(this.nextNode, "height");
        nextnode_height = nextnode_height + nextnode_paddingtop + nextnode_margintop;
      }
      pos = this.options.position;
      if (_.isObject(pos) && _.isString(pos.range) && pos.range === "outer-bottom") {
        switch (pos.x) {
          case 'l':
            fpos.left = ts.left;
            break;
          case 'r':
            fpos.left = ts.left + ts.w - adts.w;
            break;
          case 'c':
            fpos.left = ts.left + (ts.w - adts.w) / 2;
            break;
          default:
            fpos.left = ~~pos.x > 0 ? ts.left + ~~pos.x : ts.left + ts.w - adts.w + ~~pos.x;
        }
        switch (pos.y) {
          case 't':
            fpos.top = ts.top + ts.h + nextnode_height + pos.margintop;
            break;
          case 'b':
            fpos.top = view.height - adts.h - 4;
            break;
          case 'm':
            fpos.top = ts.top + (ts.h - adts.h) / 2;
            break;
          default:
            fpos.top = ~~pos.y > 0 ? ts.top + ~~pos.y : ts.top + ts.h - adts.h + ~~pos.y;
        }
      } else if (pos.range === "inner" || _.isUndefined(pos.range)) {
        switch (pos.x) {
          case 'l':
            fpos.left = ts.left;
            break;
          case 'r':
            fpos.left = ts.left + ts.w - adts.w;
            break;
          case 'c':
            fpos.left = ts.left + (ts.w - adts.w) / 2;
            break;
          default:
            fpos.left = ~~pos.x > 0 ? ts.left + ~~pos.x : ts.left + ts.w - adts.w + ~~pos.x;
        }
        switch (pos.y) {
          case 't':
            fpos.top = ts.top;
            break;
          case 'b':
            fpos.top = ts.top + ts.h - adts.h;
            break;
          case 'm':
            fpos.top = ts.top + (ts.h - adts.h) / 2;
            break;
          default:
            fpos.top = ~~pos.y > 0 ? ts.top + ~~pos.y : ts.top + ts.h - adts.h + ~~pos.y;
        }
      }
      placement_url = this.target.getAttribute("src");
      j_slide = this.target.parentNode.parentNode;
      wrap_all = doc.getElementById(customs.sinaPhoto.imgContainer);
      if (!(_.getElementByAttr("div", "placement", placement_url, this.adContainer)) && fpos.top > (ts.top + ts.h)) {
        return this.hideAd(ad);
      }
      if (loc.hostname === customs.sinaPhoto.domain && (_.getStyleValue(j_slide, "zIndex") !== 2 || _.getStyleValue(j_slide, "zIndex") === 2 && !_.hasClass(wrap_all, "on"))) {
        return this.hideAd(ad);
      }
      if (_.isHidden(this.target)) {
        return this.hideAd(ad);
      }
      return this.showAd(ad, fpos, ts, adts, pos);
    };
    CogtuAd.prototype.showAd = function(ad, fpos, ts, adts, pos) {
      _.setStyle(ad, {
        top: _.pxorpc(fpos.top),
        width: _.pxorpc(_.intval(this.size.w) || _.intval(this.target.width)),
        height: _.pxorpc(_.intval(this.size.h) || _.intval(this.target.height)),
        visibility: "visible",
        display: "block"
      });
      if (_.isDom(this.cogtuSlot)) {
        _.setStyle(this.cogtuSlot, {
          height: _.pxorpc(adts.h + pos.margintop),
          border: "none",
          margin: 0,
          padding: 0
        });
      }
      if (ts.h * ts.w > 1000) {
        return _.setStyle(ad, {
          left: _.pxorpc(fpos.left)
        });
      }
    };
    CogtuAd.prototype.hideAd = function(ad) {
      _.setStyle(ad, {
        visibility: "hidden",
        display: "none"
      });
      if (_.isDom(this.cogtuSlot)) {
        return this.cogtuSlot.style.cssText = "";
      }
    };
    CogtuAd.prototype.show = function() {
      return this.shown = true;
    };
    CogtuAd.prototype.hide = function() {
      return this.shown = false;
    };
    _.Cogtu = Cogtu = function(siteId, settings) {
      'use strict';
      this.siteId = siteId;
      this.settings = settings;
      this.dispatchServer = "http://dispatch.tusapi.com/fetch";
      if (_.isObject(settings) && _.isString(settings.devDispatchServer)) {
        this.dispatchServer = settings.devDispatchServer;
      }
      this.xhrs = {};
      this.creatives = {};
      this.curTopicId = null;
      this.curImgIdx = null;
      this.imgIds = [];
      this.adContainer = createAdContainer();
      this.transitionend = _.isPropertySupported("transitionend");
      this.orientationEventName = _.orientationEventName();
      this.locationHash = loc.hash;
      return this.init();
    };
    Cogtu.prototype = {
      init: function() {
        var _this;
        _this = this;
        if (loc.hostname === customs.weibo.domain) {
          _.event.add(win, "hashchange", function() {
            if (loc.hash !== "#showPic" && _this.locationHash === "#showPic") {
              _this.onExitImgPage();
            }
            return _this.locationHash = loc.hash;
          });
          _.event.add(doc, "click", function(evt) {
            var tgt;
            tgt = evt.target;
            if (tgt.nodeName.toLowerCase() === "img" && tgt.className === "loaded") {
              _this.getToptic(tgt);
              if (!_this.creatives.hasOwnProperty(_this.curTopicId)) {
                _this.sendDispatch(tgt);
              }
              return _this.onEnterImgPage();
            }
          });
          return _.event.add(win, _this._.orientationEventName, function(evt) {
            if (_.device.portrait()) {
              setTimeout(function() {
                return _this.showAd();
              }, 300);
            }
            return _this.hideAd();
          });
        } else {
          _this.curTopicId = "" + _this.siteId + (_.time());
          if (!_this.creatives.hasOwnProperty(_this.curTopicId)) {
            return _this.sendDispatch();
          }
        }
      },
      getToptic: function(tgt) {
        var card, i, imgs, imgsSelector, len, mediaPic, moreDetail, reWeiboUrlComponents, retCard, srcWeiboId, srcWeiboText, srcWeiboUid, stats, weiboId, weiboText, weiboUid, weiboUrlComponents, _this;
        _this = this;
        card = _.closest(tgt, "card9");
        retCard = card.querySelector("section.weibo-detail .extend-content[data-jump]");
        weiboUrlComponents = card.getAttribute("data-jump").split("/").filter(function(d) {
          return d.length > 0;
        });
        weiboUid = weiboUrlComponents[0];
        weiboId = _this.curTopicId = decodeWeiboId(weiboUrlComponents[1]);
        imgsSelector = "section.weibo-detail .media-pic-list li img[data-node=\"pic\"]";
        mediaPic = card.querySelectorAll("section.weibo-detail .media-pic");
        if (mediaPic && mediaPic.length > 0) {
          imgsSelector = "section.weibo-detail .media-pic img[data-node=\"pic\"]";
        }
        imgs = card.querySelectorAll(imgsSelector);
        i = 0;
        len = imgs.length;
        while (i < len) {
          _this.imgIds.push(getImgIdBySrc(imgs[i].getAttribute("src")));
          i++;
        }
        if (_this.creatives.hasOwnProperty(weiboId)) {
          return;
        }
        reWeiboUrlComponents = "";
        srcWeiboUid = "";
        srcWeiboId = "";
        srcWeiboText = "";
        weiboText = card.querySelector(".default-content").textContent;
        if (retCard && retCard.hasAttribute("data-jump")) {
          reWeiboUrlComponents = retCard.getAttribute("data-jump").split("/").filter(function(d) {
            return d.length > 0;
          });
          srcWeiboUid = reWeiboUrlComponents[0];
          srcWeiboId = decodeWeiboId(reWeiboUrlComponents[1]);
          srcWeiboText = retCard.querySelector(".weibo-original").textContent;
        }
        moreDetail = card.querySelector("footer.more-detail");
        stats = {
          reposts_count: _.intval(moreDetail.querySelector("[data-node=\"forward\"] .num.mct-d").textContent) || 0,
          comments_count: _.intval(moreDetail.querySelector("[data-node=\"comment\"] .num.mct-d").textContent) || 0,
          attitudes_count: _.intval(moreDetail.querySelector("[data-node=\"like\"] .num.mct-d").textContent) || 0
        };
        if (retCard) {
          _this.extData = {
            mid: srcWeiboId,
            uid: srcWeiboUid,
            text: srcWeiboText,
            pic: _this.imgIds
          };
          return _this.refextData = {
            mid: weiboId,
            uid: weiboUid,
            text: weiboText,
            stat: stats
          };
        } else {
          _this.extData = {
            mid: weiboId,
            uid: weiboUid,
            text: weiboText,
            pic: _this.imgIds,
            stat: stats
          };
          return _this.refextData = {};
        }
      },
      params: function(tgt) {
        var data, index, _this;
        _this = this;
        data = _.clone(DefaultDispatchParams);
        if (loc.hostname === customs.weibo.domain) {
          if (_.isArray(_this.imgIds)) {
            for (index in _this.imgIds) {
              data.imp.push(_this.imgIds[index]);
            }
          } else {
            data.imp.push(getImgIdBySrc(tgt.getAttribute('src')));
          }
          if (_.isObject(_this.extData) && _this.extData.hasOwnProperty('mid')) {
            data.content.pageuri = 'weibo://' + _this.extData.mid;
            data.content.ext = _this.extData;
          }
          if (_.isObject(_this.refextData) && _this.refextData.hasOwnProperty('mid')) {
            data.content.refext = _this.refextData || '';
            data.content.ref = 'weibo://' + _this.refextData.mid;
          }
        } else if (loc.hostname === customs.sinaPhoto.domain) {
          data.imp = getSinaPhotoSlots(customs.sinaPhoto);
        } else {
          data.imp = getSlots(_this.settings);
        }
        data.slotid = _this.siteId;
        data.device.orientation = getOrientation();
        data.device.ts = _.time();
        return data;
      },
      sendDispatch: function(tgt) {
        var params, _this;
        _this = this;
        params = _this.params(tgt);
        return _this.xhrs[_this.curTopicId] = _this.sendByRequest(_this.dispatchServer, params, function(response) {
          var ad, adSize, c, clicktag, creativeQuery, creativeUrl, creatives, i, imp_img, imp_width, resizedHeight, thiz, viewtag, _cg;
          response = !_.isObject(response) ? JSON.parse(response) : response;
          if ((response.ads && _.isArray(response.ads) && response.ads.length === 0) || _.isUndefined(response.ads)) {
            return;
          }
          _this.creatives[_this.curTopicId] = response.ads;
          creatives = _this.creatives[_this.curTopicId];
          for (i in creatives) {
            c = creatives[i];
            if (c && c.creative && c.creative.src && c.creative.size && c.impid) {
              viewtag = win.sinaadsMagicMapViewTAG || "";
              clicktag = win.sinaadsMagicMapClickTAG || "";
              creativeQuery = (c.creative.src || '').indexOf('?') === -1 ? '?' : '&';
              creativeUrl = _.format('{0}{1}viewtag={2}&clicktag={3}', [c.creative.src, creativeQuery, viewtag, clicktag]);
              if (loc.hostname === customs.sinaPhoto.domain) {
                imp_img = _.getElementByAttr("img", "src", c.impid, doc, true) || _.getElementByAttr("img", "smallsrc", c.impid, doc, true);
              } else {
                imp_img = _.getElementByAttr("img", "src", c.impid);
              }
              if (imp_img) {
                adSize = c.creative.size.split("x");
                imp_width = _.getStyleValue(imp_img, "width");
                if (loc.hostname === customs.sinaPhoto.domain) {
                  resizedHeight = _.intval(adSize[1] / adSize[0] * view.width);
                } else {
                  resizedHeight = _.intval(adSize[1] / adSize[0] * imp_width);
                }
                if (_.isNumber(resizedHeight)) {
                  thiz = this;
                  ad = {
                    u: '<div style="display:block;width:100%;height:' + _.pxorpc(resizedHeight) + '"><iframe src="' + creativeUrl + '" frameborder="0" width="100%" height="100%" seamless scrolling="no" allowTransparency="yes"></iframe></a>',
                    s: [false, resizedHeight],
                    click: c.clicktrack,
                    ops: {
                      closeBtn: closeIcon["60x18"],
                      closeBottom: resizedHeight - 18,
                      closeRight: 1,
                      adsbyTxt: '',
                      adsbyColor: '#fff',
                      adsbyBottom: resizedHeight - 10,
                      adsbyRight: 63,
                      position: {
                        range: "inner",
                        x: "l",
                        y: "b"
                      }
                    }
                  };
                  if (!ad.click) {
                    ad.click = false;
                  }
                  if (ad.click && /^http/.test(ad.click)) {
                    ad.click = ad.click.replace(/\{([^\}]+)\}/g, function(t, k) {
                      return ec(thiz[k] || k);
                    });
                  }
                  ad.u = !/^</.test(ad.u) ? ad.u + (!/\?/.test(ad.u) ? '?' : '&') + 't=' + +(new Date) : ad.u;
                  ad.ops.position = c.hasOwnProperty("position") && _.isObject(c.position) ? c.position : ad.ops.position;
                  ad.ops.click = ad.click;
                  _cg = new CogtuAd(c.impid, ad.u, ad.s, ad.ops);
                  if (!c.imptrack) {
                    c.imptrack = mock;
                  }
                  _.send(c.imptrack, new Image(0, 0));
                }
              }
            }
          }
          return true;
        });
      },
      onExitImgPage: function() {
        var _this;
        _this = this;
        if (_this.curTopicId in _this.xhrs) {
          _this.xhrs[_this.curTopicId].abort();
        }
        _this.clearAd();
        _this.curImgIdx = 0;
        return _this.imgIds = [];
      },
      clearAd: function() {
        var ads, i, _results, _this;
        _this = this;
        ads = _this.adContainer.querySelectorAll("a");
        i = 0;
        _results = [];
        while (i < ads.length) {
          _.removeDom(ads[i]);
          _results.push(i++);
        }
        return _results;
      },
      onEnterImgPage: function() {
        var _this;
        _this = this;
        return setTimeout((function() {
          _this.curImgIdx = 0;
          if (doc.querySelector("#J-curPage")) {
            _this.curImgIdx = _.intval(doc.querySelector("#J-curPage").textContent) - 1;
          }
          return _this.bindTransitionEndEvent();
        }), 300);
      },
      bindTransitionEndEvent: function() {
        var sliderContainer, _this;
        _this = this;
        sliderContainer = doc.querySelector("#J-slider-cont");
        _.event.add(sliderContainer, _this.transitionend, function(evt) {
          var curImgId, tgt;
          tgt = evt.target;
          if (tgt.hasAttribute("src") && tgt.getAttribute("src").length > 0) {
            curImgId = getImgIdBySrc(tgt.getAttribute("src"));
            return _this.waitServer(function() {
              _this.loadAd();
              if (curImgId === _this.imgIds[_this.curImgIdx]) {
                return _this.showAd();
              }
            });
          }
        });
        return _.event.add(sliderContainer, _this.transitionend, function(evt) {
          var newImgIdx;
          if (!!doc.querySelector("#J-curPage") && doc.querySelector("#J-curPage").textContent) {
            newImgIdx = _.intval(doc.querySelector("#J-curPage").textContent) - 1;
            if (newImgIdx !== _this.imgIndex) {
              return _this.waitServer(function() {
                _this.curImgIdx = newImgIdx;
                return _this.showAd();
              });
            }
          }
        });
      },
      waitServer: function(callback) {
        var _this;
        _this = this;
        if (_this.creatives.hasOwnProperty(_this.curTopicId) || _this.xhrs[_this.curTopicId].readyState === 4) {
          return callback();
        }
      },
      loadAd: function() {
        var arr, i, _results, _this;
        _this = this;
        arr = _this.creatives[_this.curTopicId];
        if (_.isUndefined(arr)) {
          return undef;
        }
        i = 0;
        _results = [];
        while (i < arr.length) {
          if (arr[i]) {
            _this.createAd(arr[i]);
          }
          _results.push(i++);
        }
        return _results;
      },
      createAd: function(ad) {
        var creative, wrapper, _this;
        _this = this;
        if (!!_this.getImgByPlacement(ad.impid)) {
          return;
        }
        wrapper = _.createDom("a", {
          href: ad.clicktrack
        }, {
          width: "100%"
        });
        creative = _.createDom("img", {
          src: ad.creative.src,
          placement: ad.impid
        }, {
          display: "none",
          margin: "0 auto",
          width: _.pxorpc(view.width),
          height: "auto",
          "z-index": mersenne - 1
        });
        _.event.add(wrapper, "click", function(evt) {
          return evt.stopPropagation();
        });
        wrapper.appendChild(creative);
        return _this.adContainer.appendChild(wrapper);
      },
      hideAd: function() {
        var creatives, i, _this;
        _this = this;
        if (_this.adContainer) {
          i = 0;
          creatives = _this.adContainer.querySelectorAll("img");
          while (i < creatives.length) {
            if (creatives[i].getAttribute("name") !== "cogtu_ad-close") {
              _.setStyle(creatives[i], {
                display: "none"
              });
            }
            i++;
          }
          return _.setStyle(_this.adContainer, {
            display: "none"
          });
        }
      },
      showAd: function() {
        var ad, adSize, arr, i, imgId, imgTop, resizedHeight, weiboImg, _results, _this;
        _this = this;
        _this.hideAd();
        imgId = _this.imgIds[_this.curImgIdx];
        ad = _this.getImgByPlacement(imgId);
        if (_this.creatives && _this.creatives[_this.curTopicId]) {
          arr = _this.creatives[_this.curTopicId];
          i = 0;
          _results = [];
          while (i < arr.length) {
            if (arr[i].impid === imgId) {
              adSize = arr[i].creative.size.split("x");
              resizedHeight = adSize[1] / adSize[0] * view.width;
              weiboImg = doc.querySelectorAll("#J-slider-cont .scroller")[_this.curImgIdx].querySelector("img");
              imgTop = weiboImg.offsetTop;
              if (ad && resizedHeight <= imgTop && _.device.portrait()) {
                _.setStyle(_this.adContainer, {
                  display: "block"
                });
                _.setStyle(ad, {
                  display: "block"
                });
                _this.sendImpression(imgId);
              }
            }
            _results.push(i++);
          }
          return _results;
        }
      },
      sendByRequest: function(server_url, param, callback) {
        var Request, ex, paramter, request;
        try {
          paramter = {
            slotid: param.slotid,
            uid: param.user.uid,
            pageuri: param.content.pageuri,
            viewport: param.content.viewport,
            imp: param.imp.join(","),
            sdkver: param.sdkver
          };
          return request = _.JSONP.get(server_url, paramter, callback, "render");
        } catch (_error) {
          ex = _error;
          Request = win.XDomainRequest;
          if (Request) {
            request = new Request;
            request.open("POST", server_url, true);
          } else if (Request = win.XMLHttpRequest) {
            Request = new Request;
            if ("withCredentials" in Request) {
              request = Request;
              request.open("POST", server_url, true);
              request.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
              request.withCredentials = "yes";
            }
          } else {

          }
          request = false;
          if (request) {
            if (_.isUndefined(request.onreadystatechange)) {
              request.onload = function(response) {
                response = request.response || request.responseText;
                return callback && callback(response);
              };
            } else {
              request.onreadystatechange = function(response) {
                if (request.readyState === 4) {
                  if ((request.status >= 200 && request.status < 300) || request.status === 304) {
                    response = request.response || request.responseText;
                    return callback && callback(response);
                  }
                }
              };
            }
            request.send(JSON.stringify(param));
          }
        }
        return request;
      },
      getImgByPlacement: function(imgId) {
        var _this;
        _this = this;
        if (imgId) {
          return _this.adContainer.querySelector("a img[placement=\"" + imgId + "\"]");
        }
      },
      sendImpression: function(imgId) {
        var creative, _this;
        _this = this;
        creative = _this.getCreativeByPlacement(imgId);
        if (_.isUndefined(creative.impSent)) {
          if (!creative.imptrack) {
            creative.imptrack = mock;
          }
          _.send(creative.imptrack, new Image(0, 0), function(response) {});
        }
        return creative.impSent = true;
      },
      getCreativeByPlacement: function(imgId) {
        var arr, i, _this;
        _this = this;
        arr = _this.creatives[_this.curTopicId];
        if (_.isUndefined(arr)) {
          return undef;
        }
        i = 0;
        while (i < arr.length) {
          if (arr[i].impid === imgId) {
            return arr[i];
          }
          i++;
        }
      }
    };
    return _;
  };

}).call(this);
