
function Mover(a, b) {
  if (this.created = a.created, this.x = a.x, this.y = a.y, this.offset = a.offset, this.destination = a.destination, this.layer = b.el, this.color = "hsl(" + a.port % 360 + ", 100%, 70%)", this.hit = a.onMoverHit, this.x === this.destination.x && this.y === this.destination.y)return void this.hit();
  var c = "clippath-" + Math.random();
  this.clipPath = b._defs.append("clipPath").attr("id", c), this.cliprect = this.clipPath.append("rect").attr({
    x: -trail.radius,
    y: -trail.radius,
    width: trail.height,
    height: trail.base
  }), this.obj = this.layer.append("polygon").datum(this).classed("animating", !0).attr("points", trail.points).attr("clip-path", "url(#" + c + ")").attr("fill", this.color);
  var d = this.destination;
  return this.dx = d.lx - this.x, this.dy = d.ly - this.y, this.distance = Math.sqrt(this.dx * this.dx + this.dy * this.dy), this.update(), a.zerg && this.distance > 3 * trail.height ? this.startCurve() : this.start(), this
}

function Floater(a, b) {
  num || (num = 1), this.position = b, this.addOne()
}

function Anchor() {
}

function Ping(a) {
  this.position = a.position
}

var ipv = {version: "0"}, ZERO = 1e-6, TWO_PI = 2 * Math.PI, ipv_helpers = {
  sort_descCountAscCountry: function (a, b) {
    return b.count > a.count ? 1 : b.count < a.count ? -1 : a.country < b.country ? 1 : b.country < a.country ? -1 : 0
  }, sort_descCountAscService: function (a, b) {
    return b.count > a.count ? 1 : b.count < a.count ? -1 : a.service < b.service ? 1 : b.service < a.service ? -1 : 0
  }, return_cx: function (a) {
    return a.cx
  }, return_cy: function (a) {
    return a.cy
  }, return_data: function (a) {
    return a.data
  }, d3_identity: function (a) {
    return a
  }
};
ipv.hash = {
  args: {}, parse: function (a) {
    a = (a || window.location.search).replace(/^\?/, "");
    var b = {};
    return a.split("&").forEach(function (a) {
      a = a.split("="), b[a[0]] = a[1]
    }), this.args = b, b
  }, set: function () {
  }
}, ipv.stream = {
  timestamp: d3.time.format("%Y-%m-%d %H:%M:%S.%L"),
  active: null,
  backlog: [],
  timeout: 1e3
}, ipv.stream.socket = function (a, b) {
  b = b || function () {
    };
  var c = this.sock = new WebSocket(a.host);
  return c.onopen = function () {
    c.send(a.psk)
  }, c.onmessage = b, c.onclose = function () {
    var d = this;
    setTimeout(function () {
      c = d.sock = ipv.stream.socket(a, b), d.timeout *= 2
    }, this.timeout)
  }, c.onerror = function () {
    console.log("socket error"), c.close()
  }, ipv.stream.active = c, c
}, ipv.stream.json = function (a, b) {
  var c = 100;
  d3.json(a, function (a, d) {
    if (a)throw a;
    d = d.map(function (a) {
      return {data: JSON.stringify(a), timestamp: a.timestamp}
    });
    var e = d3.nest().key(function (a) {
      return "string" == typeof a.timestamp && (a.timestamp = +ipv.stream.timestamp(a.timestamp)), Math.round(a.timestamp / c) * c
    }).map(d), f = d3.keys(e).map(Number);
    f.sort(d3.ascending);
    var g = f[0], h = setInterval(function () {
      f.length ? (f[0] === g && e["" + f.shift()].forEach(b), g += c) : clearInterval(h)
    }, c)
  })
}, ipv.stream.pause = function () {
  ipv.stream.active && (ipv.stream.paused = !0, ipv.stream.backlog.length = 0, ipv.stream.msgHandler = ipv.stream.active.onmessage.bind({}), ipv.stream.active.onmessage = function (a) {
    ipv.stream.backlog.length >= 5e3 && ipv.stream.backlog.shift(), ipv.stream.backlog.push(a)
  })
}, ipv.stream.play = function () {
  ipv.stream.active && (ipv.stream.paused = !1, ipv.stream.active.onmessage = ipv.stream.msgHandler.bind(ipv.stream.active), ipv.stream.backlog.forEach(function (a) {
    ipv.stream.active.onmessage(a)
  }), ipv.stream.backlog.length = 0)
}, ipv.map = function (a) {
  var b = L.map(a.container, a.options);
  return b._proj = function (a, c) {
    var d = b.latLngToLayerPoint(new L.LatLng(c, a));
    return [d.x, d.y]
  }, b
};
var trail = function () {
  for (var a = 2, b = 2 * a, c = 40 * b, d = 6, e = {
    x: a,
    y: a
  }, f = Math.PI / 2, g = 3 * Math.PI / 2, h = [], i = 0; d >= i; ++i) {
    var j = f + (g - f) * (i / d), k = e.x + a * Math.cos(j), l = e.y + a * Math.sin(j);
    h.push([k - a, l - a])
  }
  return h.push([c, b / 2], h[0]), {points: h, base: b, height: a + c, radius: a, center: {x: c / 2, y: b / 2}}
}();
Mover.prototype.startCurve = function () {
  function a() {
    return function (a) {
      var c = 1 - a, d = c * c, e = 2 * c * a, g = a * a, h = d * f.x + e * i.x + g * b.lx, k = d * f.y + e * i.y + g * b.ly, l = Math.atan2(j[1] - k, j[0] - h);
      return j[0] = h, j[1] = k, "translate(" + [h, k] + ") rotate(" + [180 * l / Math.PI, 0, 0] + ")"
    }
  }

  {
    var b = this.destination;
    this.dx
  }
  dy = this.dy, distance = this.distance, radius = distance / 2 * (Math.random() - .5), height = trail.height;
  var c = height / distance, d = height, e = 750, f = this, g = Math.atan2(this.y - b.ly, this.x - b.lx), h = g + Math.PI / 2, i = {
    x: (this.x + b.lx) / 2 + radius * Math.cos(h),
    y: (this.y + b.ly) / 2 + radius * Math.sin(h)
  }, j = [this.x, this.y], k = e * c;
  this.cliprect.attr("width", 0).transition().duration(k).ease("linear").attr("width", d), this.obj.transition().duration(k).ease("linear").attr("transform", a()(c)).each("end", function () {
    c = 1 === c ? 0 : c, _1mpos = 1 - c;
    var d = function (a) {
      return a >= 1 ? 1 : a * _1mpos + c
    };
    f.obj.transition().duration(e).ease(d).attrTween("transform", a).each("end", function () {
      f.cliprect.transition().duration(k).ease("linear").attr("width", 0).each("end", function () {
        f.animating = !1, f.x = b.lx, f.y = b.ly, f.die()
      })
    })
  })
}, Mover.prototype.start = function () {
  var a = this.destination, b = a.lx - this.x, c = a.ly - this.y, d = Math.sqrt(b * b + c * c), e = trail.height, f = "translate(" + [a.lx + this.offset.x, a.ly + this.offset.y] + ") rotate(" + this.svgRotation() + ")";
  if (e > d)var g = 1, h = d, i = 50; else var g = e / d, h = e, i = 750;
  var j = [b * g + this.x, c * g + this.y], k = this, l = i * g;
  this.cliprect.attr("width", 0).transition().duration(l).ease("linear").attr("width", h), this.obj.transition().duration(l).ease("linear").attr("transform", "translate(" + j + ") rotate(" + this.svgRotation() + ")").each("end", function () {
    k.obj.transition().duration(i).ease("linear").attr("transform", f).each("end", function () {
      k.cliprect.transition().duration(l).ease("linear").attr("width", 0).each("end", function () {
        k.animating = !1, k.x = a.lx, k.y = a.ly, k.die()
      })
    })
  })
}, Mover.prototype.theta = function (a) {
  return 180 * Math.atan2(this.y - a.ly, this.x - a.lx) / Math.PI
}, Mover.prototype.svgRotation = function () {
  return [this.theta(this.destination), 0, 0]
}, Mover.prototype.update = function () {
  this.obj.attr("transform", "translate(" + [this.x, this.y] + ") rotate(" + this.svgRotation() + ")")
}, Mover.prototype.setPosition = function (a, b) {
  this.destination = b, this.obj.attr("transform", "translate(" + [this.x = a.x, this.y = a.y] + ") rotate(" + this.svgRotation() + ")")
}, Mover.prototype.die = function () {
  this.obj.remove(), this.clipPath.remove(), this.hit();
  return this.layer.append("circle").classed("animating", !0).attr({
    cx: this.x + this.offset.x,
    cy: this.y + this.offset.y,
    fill: "none",
    stroke: this.color,
    "stroke-width": 5,
    r: 1e-6
  }).style({opacity: 1}).transition().duration(2600).ease("cubic-out").style("opacity", 1e-6).attr("r", 100).remove(), !1
}, Floater.prototype.addOne = function () {
}, ipv.ui = function () {
  function a(a) {
    var d = a.selectAll(".module").data(d3.values(b), function (a) {
      return a.key
    }), e = d.enter().append("div").classed("module", !0).attr("id", function (a) {
      return "ui-datatable-" + a.key
    }).style("width", function (a) {
      return a.width
    }), f = (e.append("div").classed("title", !0).text(function (a) {
      return a.name.toUpperCase()
    }), e.append("table").classed("table", !0)), g = d.select("table").datum(function (a) {
      return a
    });
    f.append("tr").classed("header", !0).selectAll("td").data(function (a) {
      return a.columns
    }).enter().append("td").attr("class", function (a) {
      return "count" === a.attr || "timestamp" === a.attr ? "number" : ""
    }).style("width", function (a) {
      return a.width
    }).text(function (a) {
      return a.display
    }), g.each(function (a) {
      c.datatables[a.key] = d3.select(this)
    }), c.minibar = d.select(".title").append("div").classed("minibar", !0), c.minibar.each(function (a) {
      a.viz || this.parentNode.removeChild(this)
    });
    var h = ipv.ui.widgets.clock();
    c.clock = {
      update: h,
      el: a.append("div").datum([]).attr({id: "ui-clock", "class": "module"})
    }, c.clock.el.call(h), c.minimizebutton = a.call(ipv.ui.widgets.minimizebutton)
  }

  var b, c = {datatables: {}, minibar: {}}, d = ipv.ui.cellfmt;
  return a.layout = function (c) {
    return arguments.length ? (b = {}, c.forEach(function (a) {
      b[a.key] = a
    }), a) : b
  }, a.widgets = function (a) {
    function b(a, d) {
      if (d = d || c, !a.length)return d;
      var e = d[a.shift()];
      return e ? (d = e, b(a, d)) : d
    }

    return a && "string" == typeof a ? b(a.split(".")) : c
  }, a.center = null, a.update = function (b) {
    var e = c.minibar.data(b.datatables, function (a) {
      return a.type
    }), f = e.selectAll(".bar").data(function (a) {
      return a.data
    });
    f.enter().append("div").classed("bar", !0).style("width", "3px");
    var g = 30;
    f.style("height", function (a) {
      return a.parent = this.parentNode.__data__, a.height = ~~(a.count / a.parent.data[0].count * (g - 5)) + 5, a.height + "px"
    }).style("background-color", function (a) {
      return "service" === a.parent.type ? a.color : "#ccc"
    }).style("margin-top", function (a) {
      return g - a.height + "px"
    });
    for (var h = 0; h < b.datatables.length; h++) {
      var i = b.datatables[h], j = c.datatables[i.type].selectAll(".row").data(i.data), k = (j.enter().append("tr").classed("row", !0), j.selectAll("td").data(d[i.type]));
      k.html(String), k.enter().append("td").attr("class", function (a, b) {
        return "cell " + this.parentNode.parentNode.firstChild.children[b].className
      })
    }
    c.clock.el.datum(b.clock).call(c.clock.update), a.center || "events" !== i.type || 10 !== i.data.length || (a.center = c.clock.update.center(), c.clock.el.select("#chevron").style("visibility", "visible").attr("transform", "translate(" + [a.center.x, a.center.y] + ")"))
  }, a
}, ipv.ui.widgets = {
  minibar: function () {
    function a(a) {
      a.each(function () {
      })
    }

    return a
  }, clock: function () {
    function a(a) {
      var b = a.clientWidth, c = a.parentNode.clientHeight, d = Math.min(b, c);
      return f !== d ? (f = d, g = f / 3, h = {
        x: f / 2,
        y: f / 1.5
      }, i = g / 4, j = i / 2, d3.select(a).select("svg").attr("width", f + "px").attr("height", f + "px"), l = {
        x1: 0,
        y1: j,
        x2: i,
        y2: j
      }, !0) : void 0
    }

    function b(b) {
      b.each(function (b) {
        if (!p) {
          a(this), p = !0;
          var c = d3.select(this).selectAll("svg").data([b]), f = c.enter().append("svg").append("g");
          f.each(d), k = c.select("g")
        }
        b.length < 10 && a(this) && (b = []);
        var i = Date.now(), m = k.selectAll("line").data(b.filter(function (a) {
          return i - a.meta.created < n
        }), function (a) {
          return a.$loki
        });
        m.style("opacity", function (a) {
          return 1 - (i - a.meta.created) / o
        }), m.enter().append("line").classed("ticker-line", !0).attr(l).style("stroke", function (a) {
          return a.service.color
        }).attr("transform", function () {
          var a = -e * Math.PI / 180, b = h.x + g * Math.cos(a), c = h.y + g * Math.sin(a);
          return "translate(" + [b - j, c - j] + ") rotate(" + [-e, j, j] + ")"
        }), m.exit().remove()
      })
    }

    function c() {
      return function (a) {
        return e = 360 * a, "rotate(" + [e, h.x, h.y] + ")"
      }
    }

    function d() {
      d3.select(this).interrupt().transition(), d3.select(this).attr("transform", "rotate(0," + [h.x, h.y] + ")").transition().duration(m).ease("linear").attrTween("transform", c).each("end", d)
    }

    var e, f, g, h, i, j, k, l, m = 3e4, n = m - .1 * m, o = m + .01 * m, p = !1;
    return b.center = function (a) {
      return arguments.length ? (h = a, b) : h
    }, b
  }, minimizebutton: function () {
    var a = !1, b = ["+", "_"], c = this.append("div").classed("minimize-button minimize", !0).text("_"), d = c.style("height");
    return c.on("mousedown", function () {
      c.text(b[+a]);
      var e = a ? "" : d;
      d3.select(this.parentNode).transition().duration(1e3).style("height", e), a = !a
    }), c
  }
}, ipv.ui.cellfmt = {
  source: function (a) {
    return [a.count, a.display]
  }, target: function (a) {
    return [a.count, a.display]
  }, service: function (a) {
    return [a.count, a.port, a.display]
  }, events: function (a) {
    var b = a.service;
    return [a.timestamp, a.org, a.ip, a.source, a.target, '<span style="color: ' + b.color + '">' + b.service + "</span>", b.port]
  }
}, function () {
  function a(a) {
    var b = !1;
    return a.forEach(function (a) {
      var c = a.data[0].count;
      c > w[a.type].domain()[1] && (w[a.type].domain([1, c]), b = !0)
    }), b
  }

  function b(a) {
    var b = y.find(a), c = {meta: {totalLinks: b.length, maxFreq: 0}, data: {}};
    return b.forEach(function (a) {
      var b = a.sourceObj, d = a.targetObj, e = b.key + d.key, f = c.data[e] || (c.data[e] = {
          count: 0,
          max: {port: "unknown", count: 0},
          source: [b.lx, b.ly],
          target: [d.lx, d.ly],
          ports: {}
        });
      ++f.count > c.meta.maxFreq && (c.meta.maxFreq = f.count);
      var g = a.service;
      port = g.port;
      var h = f.ports[port] = (f.ports[port] || 0) + 1;
      h > f.max.count && (f.max.color = g.color, f.max.port = port, f.max.count = h)
    }), c.data = d3.values(c.data), c
  }

  function c(a) {
    var b = n.selectAll(".links").data(a.data);
    b.enter().append("path").classed("links", !0), b.attr("d", function (a) {
      return "M" + [a.source] + "L" + [a.target]
    }).style("stroke", function (a) {
      return a.max.color
    }).style("stroke-width", function (b) {
      return Math.max(1, b.count / a.meta.maxFreq * 5)
    }).style("opacity", function (b) {
      return b.count / a.meta.totalLinks + .5
    }), b.exit().remove()
  }

  function d() {
    var a = n.selectAll(".links").remove();
    a = null
  }

  function e(a) {
    console.log("expire");
    var b = Date.now(), c = b - a;
    y.removeWhere(function (a) {
      var b = a.meta.created <= c;
      if (b) {
        var d = a.sourceObj, e = a.targetObj;
        d.count--, e.count--, d.countryObj.count--, e.countryObj.count--, a.serviceObj.count--
      }
      return b
    })
  }

  function f(a, b, c, d, e, f) {
    function h(a) {
      var b = document.querySelector("#ui-clock svg");
      b.appendChild(a);
      var c = d3.select("#chevron-container").append("svg").node();
      d3.select("#svg-toggle-info").on("mousedown", function () {
        d3.select("#infobox").transition().duration(1e3).style({display: "block", left: "0%"})
      }), d3.select("#infobox .close").on("mousedown", function () {
        d3.select("#infobox").transition().duration(1e3).style({left: "100%"})
      }), d3.select("#svg-zoom-in").on("mousedown", function () {
        m.zoomIn()
      }), d3.select("#svg-zoom-out").on("mousedown", function () {
        m.zoomOut()
      }), d3.select("#svg-toggle-play").on("mousedown", function () {
        ipv.stream.paused ? ipv.stream.play() : ipv.stream.pause();
        var a = ipv.stream.paused;
        d3.select(this.parentNode).select("text").style("font-size", a ? "12px" : "9px").html(a ? "&#9654;" : "&#9616;&#9616;")
      });
      var d = !1;
      d3.select(".minimize-button").on("mousedown.toggle", function () {
        d ? (a.setAttribute("transform", "translate(" + [J.center.x, J.center.y] + ")"), b.appendChild(a)) : (a.setAttribute("transform", "translate(40, 40)"), c.appendChild(a)), d = !d
      })
    }

    if (a)throw a;
    if (M = f, c.forEach(function (a) {
        a.count = 0, a.port = +a.port, a.type = "service", a.color = "hsl(" + +a.port % 360 + ", 100%, 70%)", a.display = '<span style="color: ' + a.color + '">&bigcirc;</span> ' + a.service, A.insert(a)
      }), I = d, g(b.map), !k.embed)if (J = ipv.ui().layout(e), K = d3.select("body").append("div").attr("id", "ui").call(J), document.getElementById("ui").appendChild(document.getElementById("infobox")), isInline) {
      var j = d3.select(document.getElementById("chevronHiddenDiv")).select("g").node();
      h(j)
    } else d3.select("#controls #logo").attr("src", b.ui.logo), d3.xml("assets/chevron.svg", "image/svg+xml", function (a) {
      var b = d3.select(a.documentElement).select("g").node();
      h(b)
    });
    l = ipv.stream.socket(b.stream, i)
  }

  function g(a) {
    function b() {
      d(), t = m.getZoom()
    }

    function c() {
      console.log("viewreset");
      for (var a = z.data, b = 0; b < a.length; b++) {
        var c = a[b], d = m.latLngToContainerPoint(c.latLng);
        newLayerPos = m.latLngToLayerPoint(c.latLng), c.cx = d.x, c.cy = d.y, c.lx = newLayerPos.x, c.ly = newLayerPos.y
      }
      var e = [2, m.getScaleZoom(m.getZoom()) * m.getZoom() + 2];
      ["source", "target", "service"].forEach(function (a) {
        w[a].range(e)
      }), p.redraw(), y || n.selectAll(".animating").style("visibility", "hidden").interrupt().transition().remove(), y = !1
    }

    var e = {
      tiles: {
        toner: "http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png",
        watercolor: "http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg",
        mars: "https://{s}.tiles.mapbox.com/v3/herwig.map-tly29w1z/{z}/{x}/{y}.png",
        dm: "http://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}.png",
        positron: "http://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png"
      }
    };
    a.tileUrl = k.tiles ? e.tiles[k.tiles] : a.tileUrl ? a.tileUrl : null, o ? (m = ipv.map(a), L.geoJson(topojson.feature(o, o.objects.countries).features, {
      style: {
        fillColor: "#000",
        weight: 1,
        color: "#4bffff"
      }
    }).addTo(m)) : (m = ipv.map(a), m.addLayer(a.tileUrl ? new L.TileLayer(a.tileUrl, {noWrap: !0}) : new L.TileLayer("norse-basemap-v1_1/{z}/{x}/{y}.png", {noWrap: !0}))), q = function (a, b) {
      var c = b.context;
      c.clearRect(0, 0, b.canvas.width, b.canvas.height), c.globalAlpha = .5, c.globalCompositeOperation = "lighter", [F.data(), G.data()].forEach(function (a, d) {
        c.fillStyle = d ? "white" : "hsl(0, 100%, 70%)", c.beginPath();
        for (var e = 0, f = a.length; f > e; e++) {
          var g = a[e];
          if (b.bounds.contains(g.latLng)) {
            var h = 0 | g.cx, i = 0 | g.cy;
            c.moveTo(h, i), c.arc(h, i, g.displayRadius = w[g.type](g.count), 0, TWO_PI)
          }
        }
        c.fill(), c.closePath()
      }), u = d3.geom.quadtree().x(ipv_helpers.return_cx).y(ipv_helpers.return_cy)(z.data.slice())
    }, p = L.canvasOverlay().drawing(q).addTo(m), d3.select(p._canvas).classed("anchor-layer", !0);

    var f = document.createElement("canvas"), g = f.getContext("2d");
    f.width = f.height = 16, j.showbuffer = function () {
      window.open(f.toDataURL("image/jpeg", 1))
    }, r = L.canvasOverlay().drawing(function (a, b) {
      b.context.clearRect(0, 0, b.canvas.width, b.canvas.height)
    }).addTo(m);
    var i = r._context;
    i.globalCompositeOperation = "lighter";
    var l = 24, v = l / 2, x = null;
    s = function () {
      if (M) {
        var a = this.color;
        a !== x && (g.clearRect(0, 0, l, l), g.save(), g.drawImage(M, 0, 0, l, l), g.fillStyle = a, g.globalCompositeOperation = "source-atop", g.fillRect(0, 0, l, l), g.restore(), x = a);
        var b = this.destination, c = b.displayRadius, d = 2 * (Math.random() - .5) * c - v, e = 2 * (Math.random() - .5) * c - v;
        i.drawImage(f, b.cx + d | 0, b.cy + e | 0), Math.random() > .7 && (i.globalCompositeOperation = "destination-out", i.fillStyle = "rgba(255, 255, 255, 0.1)", i.fillRect(0, 0, i.canvas.width, i.canvas.height), i.globalCompositeOperation = "lighter")
      }
    }, h(p._canvas), svgLayer = new SVGOverlay(a.options), m.addLayer(svgLayer), n = svgLayer.el;
    var y = !0;
    m.on("viewreset", c), c(), m.on("zoomstart", b), m.on("moveend", c)
  }

  function h() {
    var a = {key: !1};
    document.getElementById("map").addEventListener("mousemove", function (e) {
      var f, g = e.pageX, h = e.pageY;
      if (u.visit(function (a, b, c, d, e) {
          if (f)return !0;
          if (g >= b && d >= g && h >= c && e >= h) {
            var i = a.point;
            if (i) {
              var j = g - i.cx, k = h - i.cy, l = Math.sqrt(j * j + k * k);
              if (l <= i.r)return f = i, !0
            }
          }
        }), f && f.key !== a.key) {
        var i = {}, j = f.type + "Key";
        i[j] = f.key, c(b(i))
      } else d()
    })
  }

  function i(b) {
    if (b = JSON.parse(b.data), "O1" !== b.country && "O1" !== b.country2) {
      var c = {
        source: {
          key: (lat = b.latitude) + "_" + (lng = b.longitude),
          latLng: [+lat, +lng],
          country: b.country,
          locString: (b.city ? b.city + ", " : "") + b.country
        },
        target: {
          key: (lat = b.latitude2) + "_" + (lng = b.longitude2),
          latLng: [+lat, +lng],
          country: b.country2,
          locString: (b.city2 ? b.city2 + ", " : "") + b.country2
        }
      }, d = +b.dport, e = "hsl(" + +d % 360 + ", 100%, 70%)", f = A.findOne({port: d}) || A.insert({
          type: "service",
          port: d,
          color: e,
          service: "unknown",
          count: 0,
          display: '<span style="color: ' + e + '">&bigcirc;</span> unknown'
        });
      ++f.count, A.update(f), ["target", "source"].forEach(function (a, d) {
        var e, f = c[a];
        if (!(e = z.findOne({key: f.key, type: a}))) {
          var g = m.latLngToContainerPoint(f.latLng), h = m.latLngToLayerPoint(f.latLng);
          e = z.insert({
            key: f.key,
            cx: g.x,
            cy: g.y,
            lx: h.x,
            ly: h.y,
            latLng: f.latLng,
            location: f.locString,
            country: f.country,
            type: a,
            count: 0,
            r: 20
          }), v[b.key + b.type] = []
        }
        c[a].document = e, ++e.count;
        var i, j = f.country;
        if (!(i = B.findOne({$and: [{type: a}, {country: j}]}))) {
          var k = "<";
          k += 'img class="flag" src="img/flags/' + j + '.png"> ' + I[j], isInline && (k = I[j]), i = B.insert({
            type: a,
            country: j,
            countryName: I[j],
            display: k,
            count: 0
          })
        }
        ++i.count, e.countryObj = i, B.update(i)
      });
      var g = c.source.document, h = c.target.document, i = moment().format("DD.MM.YYYY HH:mm:ss"), j = {
        timestamp: i,
        org: b.org,
        ip: b.md5,
        source: c.source.locString,
        target: c.target.locString,
        sourceKey: c.source.key,
        targetKey: c.target.key,
        sourceCountry: b.country,
        targetCountry: b.country2,
        sourceObj: g,
        targetObj: h,
        serviceObj: f,
        service: f,
        type: "events"
      };
      y.insert(j);
      var l = b.zerg ? {x: 20 * (Math.random() - .5), y: 20 * (Math.random() - .5)} : {x: 0, y: 0};
      n.append("circle").classed("animating", !0).attr({
        cx: g.lx + l.x,
        cy: g.ly + l.y,
        fill: "none",
        stroke: f.color,
        "stroke-width": 5,
        r: 1e-6
      }).style({opacity: 1}).transition().duration(4e3).ease("cubic-out").style("opacity", 1e-6).attr("r", 80).remove();
      var o = (new Mover({
        zerg: b.zerg,
        created: i,
        x: g.lx,
        y: g.ly,
        destination: h,
        dk: h.key,
        targetIdx: h.$loki,
        latLng: g.latLng,
        lastLatLng: g.latLng,
        fixed: !1,
        port: d,
        offset: l,
        onMoverHit: s
      }, svgLayer), [{type: "source", data: C.data().slice(0, 10)}, {
        type: "service",
        data: E.data().slice(0, 10)
      }, {type: "target", data: D.data().slice(0, 10)}]);
      b.zerg || a(o) && p.redraw(), k.embed || (o.push({
        type: "events",
        data: y.data.slice(-10)
      }), J.update({datatables: o, clock: y.data.slice()}))
    }
  }

  var j = {}, k = ipv.hash.parse();
  if (k.pew) {
    d3.select("body").append("audio").attr({
      src: "assets/pew.mp3",
      preload: "auto"
    }).text(""), document.getElementsByTagName("audio")[0]
  }
  var l, m, n, o, p, q, r, s, t, u, v = {}, w = {
    counts: {source: 0, target: 0, service: 0},
    source: d3.scale.sqrt().domain([0, 1]).range([2, 16]),
    target: d3.scale.sqrt().domain([0, 1]).range([2, 16]),
    service: d3.scale.sqrt().domain([0, 1]).range([2, 16])
  }, x = new loki("attacks"), y = x.addCollection("timeline", {indices: ["source", "target", "service"]}), z = x.addCollection("anchors", {indices: ["key", "country"]}),
    A = x.addCollection("services", {indices: ["port"]}), B = x.addCollection("countries", {indices: ["country", "type"]}), C = B.addDynamicView("source_countries");
  C.applyFind({type: "source"}), C.applySort(ipv_helpers.sort_descCountAscCountry);
  var D = B.addDynamicView("target_countries");
  D.applyFind({type: "target"}), D.applySort(ipv_helpers.sort_descCountAscCountry);
  var E = A.addDynamicView("sorted_services");
  E.applyFind({count: {$gt: 0}}), E.applySort(ipv_helpers.sort_descCountAscService);
  var F = z.addDynamicView("anchor_sources");
  F.applyFind({type: "source"}), F.applySimpleSort("count", !0);
  var G = z.addDynamicView("anchor_targets");
  G.applyFind({type: "target"}), G.applySimpleSort("count", !0);
  var H = 48e4;
  setTimeout(function () {
    setInterval(function () {
      e(H)
    }, 6e4)
  }, H);
  {
    var I, J, K, M;
    d3.select("#preload")
  }
  isInline ? (document.getElementById("particleHiddenDiv").innerHTML += '<img src="assets/particle-inverse.png" id="particleHidden" style="visibility:hidden">', f(!1, json_config, nmap_services_1500, country_codes, json_layout, document.getElementById("particleHidden"))) : queue().defer(d3.json, "config.json").defer(d3.csv, "data/nmap-services-1500.csv").defer(d3.json, "data/country_codes.json").defer(d3.json, "layout.json").defer(function (a, b) {
    var c = new Image;
    c.onload = function () {
      b(null, this)
    }, c.onerror = function () {
      b("error loading particle image")
    }, c.src = a
  }, "assets/particle-inverse.png").await(f)
}();